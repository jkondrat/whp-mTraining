From 06e0c2bae3bd0df65b033558c7d6e7aae1aa6acb Mon Sep 17 00:00:00 2001
From: Sharvani <sharvanins@gmail.com>
Date: Tue, 25 Mar 2014 17:31:28 +0530
Subject: [PATCH] Sid/Sharvani|#29|Implementing provider import service.

---
 .../whp/mtraining/csv/domain/CsvImportError.java   |  45 +++++
 .../whp/mtraining/csv/domain/NodeType.java         |  58 +++++++
 .../mtraining/csv/request/CourseCsvRequest.java    | 181 +++++++++++++++++++++
 .../whp/mtraining/csv/request/CsvRequest.java      | 179 --------------------
 .../whp/mtraining/csv/request/NodeType.java        |  58 -------
 .../mtraining/csv/request/ProviderCsvRequest.java  |  71 ++++++++
 .../csv/response/CourseImportResponse.java         |  51 ------
 .../mtraining/csv/response/CsvImportResponse.java  |  49 ++++++
 .../mtraining/csv/validator/CourseImportError.java |  45 -----
 .../csv/validator/CourseStructureValidator.java    |  75 ++++-----
 .../csv/validator/ProviderStructureValidator.java  |  66 ++++++++
 .../whp/mtraining/domain/Provider.java             |  43 +++--
 .../service/impl/CourseImportService.java          |  24 ++-
 .../service/impl/ProviderImportService.java        |  38 +++++
 .../web/controller/BookmarkController.java         |  29 ++--
 .../web/controller/CourseImportController.java     |  23 +--
 .../web/controller/ProviderImportController.java   |  55 +++++++
 .../whp/mtraining/web/domain/ActivationStatus.java |   2 +-
 .../V23__add_location_to_provider_table.sql        |   3 +
 mtraining/src/main/resources/webapp/css/base.css   |  25 ++-
 .../src/main/resources/webapp/images/spinner.gif   | Bin 0 -> 34182 bytes
 mtraining/src/main/resources/webapp/index.html     |  27 ++-
 mtraining/src/main/resources/webapp/js/app.js      |   1 -
 .../src/main/resources/webapp/js/controllers.js    |  32 ----
 .../src/main/resources/webapp/js/directives.js     |  17 --
 .../main/resources/webapp/js/fileModelDirective.js |  17 ++
 .../resources/webapp/js/fileUploadController.js    |  40 +++++
 .../main/resources/webapp/js/fileUploadService.js  |  16 ++
 mtraining/src/main/resources/webapp/js/services.js |  21 ---
 .../whp/mtraining/csv/parser/CsvParserTest.java    |   8 +-
 .../csv/request/CourseCsvRequestTest.java          |  68 ++++++++
 .../whp/mtraining/csv/request/csvRequestTest.java  |  68 --------
 .../validator/CourseStructureValidatorTest.java    |  65 ++++----
 .../validator/ProviderStructureValidatorTest.java  | 126 ++++++++++++++
 .../whp/mtraining/osgi/BookmarksBundleIT.java      |   3 +-
 .../whp/mtraining/repository/ProvidersIT.java      |   4 +-
 .../service/impl/CourseImportServiceTest.java      |  31 ++--
 .../service/impl/ProviderImportServiceTest.java    |  65 ++++++++
 .../service/impl/ProviderServiceImplTest.java      |   6 +-
 .../web/controller/BookmarkControllerTest.java     |  32 ++--
 .../web/controller/CourseImportControllerTest.java |  36 ++--
 .../controller/ProviderImportControllerTest.java   |  67 ++++++++
 42 files changed, 1197 insertions(+), 673 deletions(-)
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/CsvImportError.java
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/NodeType.java
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequest.java
 delete mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CsvRequest.java
 delete mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/NodeType.java
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/ProviderCsvRequest.java
 delete mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CourseImportResponse.java
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CsvImportResponse.java
 delete mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseImportError.java
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidator.java
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/ProviderImportService.java
 create mode 100644 mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/ProviderImportController.java
 create mode 100644 mtraining/src/main/resources/db/migration/V23__add_location_to_provider_table.sql
 create mode 100644 mtraining/src/main/resources/webapp/images/spinner.gif
 delete mode 100644 mtraining/src/main/resources/webapp/js/controllers.js
 delete mode 100644 mtraining/src/main/resources/webapp/js/directives.js
 create mode 100644 mtraining/src/main/resources/webapp/js/fileModelDirective.js
 create mode 100644 mtraining/src/main/resources/webapp/js/fileUploadController.js
 create mode 100644 mtraining/src/main/resources/webapp/js/fileUploadService.js
 delete mode 100644 mtraining/src/main/resources/webapp/js/services.js
 create mode 100644 mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequestTest.java
 delete mode 100644 mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/csvRequestTest.java
 create mode 100644 mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidatorTest.java
 create mode 100644 mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderImportServiceTest.java
 create mode 100644 mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/ProviderImportControllerTest.java

diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/CsvImportError.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/CsvImportError.java
new file mode 100644
index 0000000..f50b158
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/CsvImportError.java
@@ -0,0 +1,45 @@
+package org.motechproject.whp.mtraining.csv.domain;
+
+import org.apache.commons.lang.builder.EqualsBuilder;
+import org.apache.commons.lang.builder.HashCodeBuilder;
+
+public class CsvImportError {
+    private static final String DEFAULT = "-";
+    private String nodeName;
+    private String nodeType;
+    private String message;
+
+    public CsvImportError(String nodeName, String nodeType, String message) {
+        this.nodeName = nodeName;
+        this.nodeType = nodeType;
+        this.message = message;
+    }
+
+    public CsvImportError(String message) {
+        this.message = message;
+        this.nodeName = DEFAULT;
+        this.nodeType = "-";
+    }
+
+    public String getNodeName() {
+        return nodeName;
+    }
+
+    public String getNodeType() {
+        return nodeType;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        return EqualsBuilder.reflectionEquals(this, other);
+    }
+
+    @Override
+    public int hashCode() {
+        return HashCodeBuilder.reflectionHashCode(this);
+    }
+}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/NodeType.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/NodeType.java
new file mode 100644
index 0000000..3de1c3c
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/domain/NodeType.java
@@ -0,0 +1,58 @@
+package org.motechproject.whp.mtraining.csv.domain;
+
+import org.apache.commons.lang.StringUtils;
+
+public enum NodeType {
+    COURSE(null),
+    MODULE(COURSE),
+    CHAPTER(MODULE),
+    MESSAGE(CHAPTER),
+    QUESTION(CHAPTER);
+
+    private NodeType parent;
+
+    private NodeType(NodeType parent) {
+        this.parent = parent;
+    }
+
+    public boolean hasValidParentType(String parentNodeType) {
+        return from(parentNodeType).equals(parent);
+    }
+
+    public static NodeType from(String nodeType) {
+        try {
+            return NodeType.valueOf(StringUtils.trimToEmpty(nodeType).toUpperCase());
+        } catch (IllegalArgumentException exception) {
+            return null;
+        }
+    }
+
+    public static NodeType getChildNodeType(String nodeType) {
+        for (NodeType currentNodeType : NodeType.values()) {
+            if (from(nodeType).equals(currentNodeType.getParent())) {
+                return currentNodeType;
+            }
+        }
+        return null;
+    }
+
+    public NodeType getParent() {
+        return parent;
+    }
+
+    public static boolean isCourse(String nodeType) {
+        return NodeType.COURSE.equals(from(nodeType));
+    }
+
+    public static boolean isMessage(String nodeType) {
+        return NodeType.MESSAGE.equals(from(nodeType));
+    }
+
+    public static boolean isQuestion(String nodeType) {
+        return NodeType.QUESTION.equals(from(nodeType));
+    }
+
+    public static boolean isChapter(String nodeType) {
+        return NodeType.CHAPTER.equals(from(nodeType));
+    }
+}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequest.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequest.java
new file mode 100644
index 0000000..b4dd930
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequest.java
@@ -0,0 +1,181 @@
+package org.motechproject.whp.mtraining.csv.request;
+
+import org.motechproject.whp.mtraining.csv.domain.NodeType;
+
+import java.util.List;
+
+import static java.util.Arrays.asList;
+import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+import static org.apache.commons.lang.StringUtils.split;
+
+public class CourseCsvRequest {
+    private String nodeName;
+    private String nodeType;
+    private String status;
+    private String parentNode;
+    private String description;
+    private String fileName;
+    private String options;
+    private String correctAnswer;
+    private String correctAnswerFileName;
+    private String noOfQuizQuestions;
+    private String passPercentage;
+
+    public CourseCsvRequest() {
+    }
+
+    public CourseCsvRequest(String nodeName, String nodeType, String status, String parentNode, String description, String fileName) {
+        this.nodeName = nodeName;
+        this.nodeType = nodeType;
+        this.status = status;
+        this.parentNode = parentNode;
+        this.description = description;
+        this.fileName = fileName;
+    }
+
+    public CourseCsvRequest(String nodeName, String nodeType, String status, String parentNode, String description,
+                            String fileName, String options, String correctAnswer, String correctAnswerFileName, String noOfQuizQuestions, String passPercentage) {
+        this.nodeName = nodeName;
+        this.nodeType = nodeType;
+        this.status = status;
+        this.parentNode = parentNode;
+        this.description = description;
+        this.fileName = fileName;
+        this.options = options;
+        this.correctAnswer = correctAnswer;
+        this.correctAnswerFileName = correctAnswerFileName;
+        this.noOfQuizQuestions = noOfQuizQuestions;
+        this.passPercentage = passPercentage;
+    }
+
+    public String getNodeName() {
+        return nodeName;
+    }
+
+    public String getNodeType() {
+        return nodeType;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public String getParentNode() {
+        return parentNode;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public String getFileName() {
+        return fileName;
+    }
+
+    public boolean isCourse() {
+        return NodeType.isCourse(nodeType);
+    }
+
+    public boolean hasParent() {
+        return isNotBlank(parentNode);
+    }
+
+    public boolean isMessage() {
+        return NodeType.isMessage(nodeType);
+    }
+
+    public boolean isQuestion() {
+        return NodeType.isQuestion(nodeType);
+    }
+
+    public boolean isChapter() {
+        return NodeType.isChapter(nodeType);
+    }
+
+    public boolean hasFileName() {
+        return isNotBlank(fileName);
+    }
+
+    public String getOptions() {
+        return options;
+    }
+
+    public boolean hasValidParentType(String parentNodeType) {
+        NodeType nodeType = NodeType.from(this.nodeType);
+        return nodeType.hasValidParentType(parentNodeType);
+    }
+
+    public String getChildNodeType() {
+        NodeType childNodeType = NodeType.getChildNodeType(nodeType);
+        return childNodeType != null ? childNodeType.name() : "";
+    }
+
+    public boolean isValidStatus() {
+        return isBlank(status) || "ACTIVE".equalsIgnoreCase(status) || "INACTIVE".equalsIgnoreCase(status);
+    }
+
+    public String getCorrectAnswer() {
+        return correctAnswer;
+    }
+
+    public String getCorrectAnswerFileName() {
+        return correctAnswerFileName;
+    }
+
+    public String getNoOfQuizQuestions() {
+        return noOfQuizQuestions;
+    }
+
+    public void setNodeName(String nodeName) {
+        this.nodeName = nodeName;
+    }
+
+    public void setNodeType(String nodeType) {
+        this.nodeType = nodeType;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public void setParentNode(String parentNode) {
+        this.parentNode = parentNode;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public void setFileName(String fileName) {
+        this.fileName = fileName;
+    }
+
+    public void setOptions(String options) {
+        this.options = options;
+    }
+
+    public void setCorrectAnswer(String correctAnswer) {
+        this.correctAnswer = correctAnswer;
+    }
+
+    public void setCorrectAnswerFileName(String correctAnswerFileName) {
+        this.correctAnswerFileName = correctAnswerFileName;
+    }
+
+    public void setNoOfQuizQuestions(String noOfQuizQuestions) {
+        this.noOfQuizQuestions = noOfQuizQuestions;
+    }
+
+    public List<String> getOptionsAsList() {
+        return isBlank(options) ? null : asList(split(options, ';'));
+    }
+
+    public String getPassPercentage() {
+        return passPercentage;
+    }
+
+    public void setPassPercentage(String passPercentage) {
+        this.passPercentage = passPercentage;
+    }
+}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CsvRequest.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CsvRequest.java
deleted file mode 100644
index cbec371..0000000
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/CsvRequest.java
+++ /dev/null
@@ -1,179 +0,0 @@
-package org.motechproject.whp.mtraining.csv.request;
-
-import java.util.List;
-
-import static java.util.Arrays.asList;
-import static org.apache.commons.lang.StringUtils.isBlank;
-import static org.apache.commons.lang.StringUtils.isNotBlank;
-import static org.apache.commons.lang.StringUtils.split;
-
-public class CsvRequest {
-    private String nodeName;
-    private String nodeType;
-    private String status;
-    private String parentNode;
-    private String description;
-    private String fileName;
-    private String options;
-    private String correctAnswer;
-    private String correctAnswerFileName;
-    private String noOfQuizQuestions;
-    private String passPercentage;
-
-    public CsvRequest() {
-    }
-
-    public CsvRequest(String nodeName, String nodeType, String status, String parentNode, String description, String fileName) {
-        this.nodeName = nodeName;
-        this.nodeType = nodeType;
-        this.status = status;
-        this.parentNode = parentNode;
-        this.description = description;
-        this.fileName = fileName;
-    }
-
-    public CsvRequest(String nodeName, String nodeType, String status, String parentNode, String description,
-                      String fileName, String options, String correctAnswer, String correctAnswerFileName, String noOfQuizQuestions, String passPercentage) {
-        this.nodeName = nodeName;
-        this.nodeType = nodeType;
-        this.status = status;
-        this.parentNode = parentNode;
-        this.description = description;
-        this.fileName = fileName;
-        this.options = options;
-        this.correctAnswer = correctAnswer;
-        this.correctAnswerFileName = correctAnswerFileName;
-        this.noOfQuizQuestions = noOfQuizQuestions;
-        this.passPercentage = passPercentage;
-    }
-
-    public String getNodeName() {
-        return nodeName;
-    }
-
-    public String getNodeType() {
-        return nodeType;
-    }
-
-    public String getStatus() {
-        return status;
-    }
-
-    public String getParentNode() {
-        return parentNode;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public String getFileName() {
-        return fileName;
-    }
-
-    public boolean isCourse() {
-        return NodeType.isCourse(nodeType);
-    }
-
-    public boolean hasParent() {
-        return isNotBlank(parentNode);
-    }
-
-    public boolean isMessage() {
-        return NodeType.isMessage(nodeType);
-    }
-
-    public boolean isQuestion() {
-        return NodeType.isQuestion(nodeType);
-    }
-
-    public boolean isChapter() {
-        return NodeType.isChapter(nodeType);
-    }
-
-    public boolean hasFileName() {
-        return isNotBlank(fileName);
-    }
-
-    public String getOptions() {
-        return options;
-    }
-
-    public boolean hasValidParentType(String parentNodeType) {
-        NodeType nodeType = NodeType.from(this.nodeType);
-        return nodeType.hasValidParentType(parentNodeType);
-    }
-
-    public String getChildNodeType() {
-        NodeType childNodeType = NodeType.getChildNodeType(nodeType);
-        return childNodeType != null ? childNodeType.name() : "";
-    }
-
-    public boolean isValidStatus() {
-        return isBlank(status) || "ACTIVE".equalsIgnoreCase(status) || "INACTIVE".equalsIgnoreCase(status);
-    }
-
-    public String getCorrectAnswer() {
-        return correctAnswer;
-    }
-
-    public String getCorrectAnswerFileName() {
-        return correctAnswerFileName;
-    }
-
-    public String getNoOfQuizQuestions() {
-        return noOfQuizQuestions;
-    }
-
-    public void setNodeName(String nodeName) {
-        this.nodeName = nodeName;
-    }
-
-    public void setNodeType(String nodeType) {
-        this.nodeType = nodeType;
-    }
-
-    public void setStatus(String status) {
-        this.status = status;
-    }
-
-    public void setParentNode(String parentNode) {
-        this.parentNode = parentNode;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public void setFileName(String fileName) {
-        this.fileName = fileName;
-    }
-
-    public void setOptions(String options) {
-        this.options = options;
-    }
-
-    public void setCorrectAnswer(String correctAnswer) {
-        this.correctAnswer = correctAnswer;
-    }
-
-    public void setCorrectAnswerFileName(String correctAnswerFileName) {
-        this.correctAnswerFileName = correctAnswerFileName;
-    }
-
-    public void setNoOfQuizQuestions(String noOfQuizQuestions) {
-        this.noOfQuizQuestions = noOfQuizQuestions;
-    }
-
-    public List<String> getOptionsAsList() {
-        return isBlank(options) ? null : asList(split(options, ';'));
-    }
-
-    public String getPassPercentage() {
-        return passPercentage;
-    }
-
-    public void setPassPercentage(String passPercentage) {
-        this.passPercentage = passPercentage;
-    }
-}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/NodeType.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/NodeType.java
deleted file mode 100644
index aad6e66..0000000
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/NodeType.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package org.motechproject.whp.mtraining.csv.request;
-
-import org.apache.commons.lang.StringUtils;
-
-public enum NodeType {
-    COURSE(null),
-    MODULE(COURSE),
-    CHAPTER(MODULE),
-    MESSAGE(CHAPTER),
-    QUESTION(CHAPTER);
-
-    private NodeType parent;
-
-    private NodeType(NodeType parent) {
-        this.parent = parent;
-    }
-
-    public boolean hasValidParentType(String parentNodeType) {
-        return from(parentNodeType).equals(parent);
-    }
-
-    public static NodeType from(String nodeType) {
-        try {
-            return NodeType.valueOf(StringUtils.trimToEmpty(nodeType).toUpperCase());
-        } catch (IllegalArgumentException exception) {
-            return null;
-        }
-    }
-
-    public static NodeType getChildNodeType(String nodeType) {
-        for (NodeType currentNodeType : NodeType.values()) {
-            if (from(nodeType).equals(currentNodeType.getParent())) {
-                return currentNodeType;
-            }
-        }
-        return null;
-    }
-
-    public NodeType getParent() {
-        return parent;
-    }
-
-    public static boolean isCourse(String nodeType) {
-        return NodeType.COURSE.equals(from(nodeType));
-    }
-
-    public static boolean isMessage(String nodeType) {
-        return NodeType.MESSAGE.equals(from(nodeType));
-    }
-
-    public static boolean isQuestion(String nodeType) {
-        return NodeType.QUESTION.equals(from(nodeType));
-    }
-
-    public static boolean isChapter(String nodeType) {
-        return NodeType.CHAPTER.equals(from(nodeType));
-    }
-}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/ProviderCsvRequest.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/ProviderCsvRequest.java
new file mode 100644
index 0000000..d5c0060
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/request/ProviderCsvRequest.java
@@ -0,0 +1,71 @@
+package org.motechproject.whp.mtraining.csv.request;
+
+public class ProviderCsvRequest {
+
+    private String remedyId;
+    private String primaryContactNumber;
+    private String activationStatus;
+    private String state;
+    private String block;
+    private String district;
+
+    public ProviderCsvRequest() {
+    }
+
+    public ProviderCsvRequest(String remedyId, String primaryContactNumber, String activationStatus, String state, String block, String district) {
+        this.remedyId = remedyId;
+        this.primaryContactNumber = primaryContactNumber;
+        this.activationStatus = activationStatus;
+        this.state = state;
+        this.block = block;
+        this.district = district;
+    }
+
+    public String getRemedyId() {
+        return remedyId;
+    }
+
+    public void setRemedyId(String remedyId) {
+        this.remedyId = remedyId;
+    }
+
+    public String getPrimaryContactNumber() {
+        return primaryContactNumber;
+    }
+
+    public void setPrimaryContactNumber(String primaryContactNumber) {
+        this.primaryContactNumber = primaryContactNumber;
+    }
+
+    public String getActivationStatus() {
+        return activationStatus;
+    }
+
+    public void setActivationStatus(String activationStatus) {
+        this.activationStatus = activationStatus;
+    }
+
+    public String getState() {
+        return state;
+    }
+
+    public void setState(String state) {
+        this.state = state;
+    }
+
+    public String getBlock() {
+        return block;
+    }
+
+    public void setBlock(String block) {
+        this.block = block;
+    }
+
+    public String getDistrict() {
+        return district;
+    }
+
+    public void setDistrict(String district) {
+        this.district = district;
+    }
+}
\ No newline at end of file
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CourseImportResponse.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CourseImportResponse.java
deleted file mode 100644
index f229ad7..0000000
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CourseImportResponse.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package org.motechproject.whp.mtraining.csv.response;
-
-import org.motechproject.mtraining.dto.ContentIdentifierDto;
-import org.motechproject.whp.mtraining.csv.validator.CourseImportError;
-
-import java.util.Collections;
-import java.util.List;
-
-public class CourseImportResponse {
-    private static final String FAILURE_RESPONSE_STATUS = "FAILURE";
-    public static final String SUCCESS_RESPONSE_STATUS = "SUCCESS";
-    private String status;
-    private String message;
-    private List<CourseImportError> errors;
-
-    private CourseImportResponse(String status, String message, List<CourseImportError> errors) {
-        this.status = status;
-        this.message = message;
-        this.errors = errors;
-    }
-
-    public static CourseImportResponse failure(List<CourseImportError> validationErrors) {
-        String errorMessage = "Could not import the CSV due to errors. Please fix the errors and try importing again.";
-        return new CourseImportResponse(FAILURE_RESPONSE_STATUS, errorMessage, validationErrors);
-    }
-
-    public static CourseImportResponse success(ContentIdentifierDto courseIdentifier) {
-        String message = String.format("Course: %s with version %s has been imported successfully", courseIdentifier.getContentId(), courseIdentifier.getVersion());
-        return new CourseImportResponse(SUCCESS_RESPONSE_STATUS, message, Collections.EMPTY_LIST);
-    }
-
-    public boolean isSuccess() {
-        return SUCCESS_RESPONSE_STATUS.equals(status);
-    }
-
-    public boolean isFailure() {
-        return FAILURE_RESPONSE_STATUS.equals(status);
-    }
-
-    public String getStatus() {
-        return status;
-    }
-
-    public String getMessage() {
-        return message;
-    }
-
-    public List<CourseImportError> getErrors() {
-        return errors;
-    }
-}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CsvImportResponse.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CsvImportResponse.java
new file mode 100644
index 0000000..d388e1f
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/response/CsvImportResponse.java
@@ -0,0 +1,49 @@
+package org.motechproject.whp.mtraining.csv.response;
+
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
+
+import java.util.Collections;
+import java.util.List;
+
+public class CsvImportResponse {
+    public static final String FAILURE_RESPONSE_STATUS = "FAILURE";
+    public static final String SUCCESS_RESPONSE_STATUS = "SUCCESS";
+    private String status;
+    private String message;
+    private List<CsvImportError> errors;
+
+    private CsvImportResponse(String status, String message, List<CsvImportError> errors) {
+        this.status = status;
+        this.message = message;
+        this.errors = errors;
+    }
+
+    public static CsvImportResponse failure(List<CsvImportError> validationErrors) {
+        String errorMessage = "Could not import the CSV due to errors. Please fix the errors and try importing again.";
+        return new CsvImportResponse(FAILURE_RESPONSE_STATUS, errorMessage, validationErrors);
+    }
+
+    public static CsvImportResponse success(String message) {
+        return new CsvImportResponse(SUCCESS_RESPONSE_STATUS, message, Collections.EMPTY_LIST);
+    }
+
+    public boolean isSuccess() {
+        return SUCCESS_RESPONSE_STATUS.equals(status);
+    }
+
+    public boolean isFailure() {
+        return FAILURE_RESPONSE_STATUS.equals(status);
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public List<CsvImportError> getErrors() {
+        return errors;
+    }
+}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseImportError.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseImportError.java
deleted file mode 100644
index 28d9cf8..0000000
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseImportError.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package org.motechproject.whp.mtraining.csv.validator;
-
-import org.apache.commons.lang.builder.EqualsBuilder;
-import org.apache.commons.lang.builder.HashCodeBuilder;
-
-public class CourseImportError {
-    private static final String DEFAULT = "-";
-    private String nodeName;
-    private String nodeType;
-    private String message;
-
-    public CourseImportError(String nodeName, String nodeType, String message) {
-        this.nodeName = nodeName;
-        this.nodeType = nodeType;
-        this.message = message;
-    }
-
-    public CourseImportError(String message) {
-        this.message = message;
-        this.nodeName = DEFAULT;
-        this.nodeType = "-";
-    }
-
-    public String getNodeName() {
-        return nodeName;
-    }
-
-    public String getNodeType() {
-        return nodeType;
-    }
-
-    public String getMessage() {
-        return message;
-    }
-
-    @Override
-    public boolean equals(Object other) {
-        return EqualsBuilder.reflectionEquals(this, other);
-    }
-
-    @Override
-    public int hashCode() {
-        return HashCodeBuilder.reflectionHashCode(this);
-    }
-}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidator.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidator.java
index fa7839f..7faa518 100644
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidator.java
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidator.java
@@ -5,7 +5,8 @@ import org.apache.commons.collections.Predicate;
 import org.apache.commons.lang.StringUtils;
 import org.motechproject.mtraining.dto.CourseDto;
 import org.motechproject.mtraining.service.CourseService;
-import org.motechproject.whp.mtraining.csv.request.CsvRequest;
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
+import org.motechproject.whp.mtraining.csv.request.CourseCsvRequest;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -36,23 +37,23 @@ public class CourseStructureValidator {
         this.courseService = courseService;
     }
 
-    public List<CourseImportError> validate(List<CsvRequest> requests) {
-        List<CourseImportError> errors = new ArrayList<>();
+    public List<CsvImportError> validate(List<CourseCsvRequest> requests) {
+        List<CsvImportError> errors = new ArrayList<>();
         Set<String> parents = new HashSet<>();
         if (!requests.get(0).isCourse()) {
-            CourseImportError error = new CourseImportError(COURSE_NAME_NOT_FOUND);
+            CsvImportError error = new CsvImportError(COURSE_NAME_NOT_FOUND);
             errors.add(error);
             logger.info(String.format("Validation error: %s", error.getMessage()));
             return errors;
         }
-        for (CsvRequest request : requests) {
+        for (CourseCsvRequest request : requests) {
             if (request.hasParent()) {
                 parents.add(request.getParentNode());
             }
         }
-        for (CsvRequest request : requests) {
+        for (CourseCsvRequest request : requests) {
             if (request.isCourse() && requests.indexOf(request) != 0) {
-                CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), MULTIPLE_COURSE_NODES_IN_CSV);
+                CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), MULTIPLE_COURSE_NODES_IN_CSV);
                 errors.add(error);
                 logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
                 return errors;
@@ -62,7 +63,7 @@ public class CourseStructureValidator {
         return errors;
     }
 
-    private void validate(CsvRequest request, List<CsvRequest> requests, List<CourseImportError> errors, Set<String> parentNamesMap) {
+    private void validate(CourseCsvRequest request, List<CourseCsvRequest> requests, List<CsvImportError> errors, Set<String> parentNamesMap) {
         if (isInvalidNodeName(request, errors) || isNodeNameADuplicate(request, errors, requests)) {
             return;
         }
@@ -81,7 +82,7 @@ public class CourseStructureValidator {
                 if (quizQuestions > 0) {
                     Long passPercentage = isNotBlank(request.getPassPercentage()) ? parseLong(request.getPassPercentage()) : 0;
                     if (passPercentage < 0 || passPercentage > 100) {
-                        CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "Pass percentage should be between 0 and 100. Please verify and try importing again");
+                        CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "Pass percentage should be between 0 and 100. Please verify and try importing again");
                         errors.add(error);
                         logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
                         return;
@@ -89,7 +90,7 @@ public class CourseStructureValidator {
                     verifyQuestions(quizQuestions, requests, request, errors);
                 }
             } catch (NumberFormatException e) {
-                CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "A Chapter should have valid no of questions and pass percentage between 0 and 100. Please try importing it again.");
+                CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "A Chapter should have valid no of questions and pass percentage between 0 and 100. Please try importing it again.");
                 errors.add(error);
                 logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
                 return;
@@ -102,7 +103,7 @@ public class CourseStructureValidator {
         }
 
         if ((request.isMessage() || request.isQuestion()) && !request.hasFileName()) {
-            CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "A message and question should have the name of the audio file. Please add the filename to CSV and try importing it again.");
+            CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "A message and question should have the name of the audio file. Please add the filename to CSV and try importing it again.");
             errors.add(error);
             logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
             return;
@@ -114,44 +115,44 @@ public class CourseStructureValidator {
 
     }
 
-    private void verifyQuestions(Integer quizQuestions, List<CsvRequest> requests, CsvRequest chapterRequest, List<CourseImportError> errors) {
+    private void verifyQuestions(Integer quizQuestions, List<CourseCsvRequest> requests, CourseCsvRequest chapterRequest, List<CsvImportError> errors) {
         Integer noOfQuestions = 0;
-        for (CsvRequest request : requests) {
+        for (CourseCsvRequest request : requests) {
             if (chapterRequest.getNodeName().equalsIgnoreCase(request.getParentNode()))
                 noOfQuestions++;
         }
         if (noOfQuestions < quizQuestions) {
-            CourseImportError error = new CourseImportError(chapterRequest.getNodeName(), chapterRequest.getNodeType(), "The no of questions for the chapter is less than the specified minimum no of questions required to be answered. Please verify and ry importing again.");
+            CsvImportError error = new CsvImportError(chapterRequest.getNodeName(), chapterRequest.getNodeType(), "The no of questions for the chapter is less than the specified minimum no of questions required to be answered. Please verify and ry importing again.");
             errors.add(error);
             logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
         }
     }
 
-    private void validateOptionsAndAnswers(CsvRequest request, List<CourseImportError> errors) {
+    private void validateOptionsAndAnswers(CourseCsvRequest request, List<CsvImportError> errors) {
         if (isEmpty(request.getOptionsAsList()) || !request.getOptionsAsList().contains(request.getCorrectAnswer())) {
-            CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "A Question should contain options and correct answer should be one among the options. Please verify and try importing it again.");
+            CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "A Question should contain options and correct answer should be one among the options. Please verify and try importing it again.");
             errors.add(error);
             logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
         }
         if (isBlank(request.getCorrectAnswerFileName())) {
-            CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "A Question should have the name of the correct answer audio file. Please add the filename to CSV and try importing it again.");
+            CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "A Question should have the name of the correct answer audio file. Please add the filename to CSV and try importing it again.");
             errors.add(error);
             logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
         }
     }
 
-    private void validateStatus(CsvRequest request, List<CourseImportError> errors) {
+    private void validateStatus(CourseCsvRequest request, List<CsvImportError> errors) {
         if (request.isValidStatus())
             return;
-        CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "Invalid status. Status should be either ACTIVE OR INACTIVE.");
+        CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "Invalid status. Status should be either ACTIVE OR INACTIVE.");
         errors.add(error);
         logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
     }
 
-    private boolean isInvalidNodeName(CsvRequest request, List<CourseImportError> errors) {
+    private boolean isInvalidNodeName(CourseCsvRequest request, List<CsvImportError> errors) {
         String nodeName = request.getNodeName();
         if (isBlank(nodeName)) {
-            CourseImportError error = new CourseImportError("Name not specified. Please specify the node name and try importing again.");
+            CsvImportError error = new CsvImportError("Name not specified. Please specify the node name and try importing again.");
             errors.add(error);
             logger.info(String.format("Validation error: %s", error.getMessage()));
             return true;
@@ -159,46 +160,46 @@ public class CourseStructureValidator {
         return request.isCourse() ? isValidCourseName(nodeName, errors) : false;
     }
 
-    private boolean isValidCourseName(String nodeName, List<CourseImportError> errors) {
+    private boolean isValidCourseName(String nodeName, List<CsvImportError> errors) {
         List<CourseDto> existingCourses = courseService.getAllCourses();
         if (existingCourses.isEmpty() || StringUtils.equalsIgnoreCase(existingCourses.get(0).getName(), nodeName))
             return true;
-        CourseImportError error = new CourseImportError(String.format("Course: %s already exists in database. You cannot import a new course.", existingCourses.get(0).getName()));
+        CsvImportError error = new CsvImportError(String.format("Course: %s already exists in database. You cannot import a new course.", existingCourses.get(0).getName()));
         errors.add(error);
         logger.info(String.format("Validation error: %s", error.getMessage()));
         return false;
     }
 
-    private boolean hasNoChild(CsvRequest courseStructureObject, Set<String> parentNamesMap, List<CourseImportError> errors) {
+    private boolean hasNoChild(CourseCsvRequest courseStructureObject, Set<String> parentNamesMap, List<CsvImportError> errors) {
         if (!parentNamesMap.contains(courseStructureObject.getNodeName())) {
             String errorMessage = "A " + courseStructureObject.getNodeType().toLowerCase() + " should have at least one " + courseStructureObject.getChildNodeType().toLowerCase() + " under it. Please check if the parent node name is correctly specified for modules in the CSV and try importing it again.";
-            errors.add(new CourseImportError(courseStructureObject.getNodeName(), courseStructureObject.getNodeType(), errorMessage));
+            errors.add(new CsvImportError(courseStructureObject.getNodeName(), courseStructureObject.getNodeType(), errorMessage));
             logger.info(String.format("Validation error for node %s with node type %s: %s", courseStructureObject.getNodeName(), courseStructureObject.getNodeType(), errorMessage));
             return true;
         }
         return false;
     }
 
-    private boolean isNodeNameADuplicate(final CsvRequest request, List<CourseImportError> errors, List<CsvRequest> requests) {
+    private boolean isNodeNameADuplicate(final CourseCsvRequest request, List<CsvImportError> errors, List<CourseCsvRequest> requests) {
         boolean duplicateNodeNameExists = CollectionUtils.exists(requests, new Predicate() {
             @Override
             public boolean evaluate(Object object) {
-                CsvRequest otherRequest = (CsvRequest) object;
+                CourseCsvRequest otherRequest = (CourseCsvRequest) object;
                 return !request.equals(otherRequest) && StringUtils.equals(request.getNodeName(), otherRequest.getNodeName());
             }
         });
         if (duplicateNodeNameExists) {
             String errorMessage = "There are 2 or more nodes with the same name: " + request.getNodeName() + ". Please ensure the nodes are named differently and try importing again.";
-            errors.add(new CourseImportError(request.getNodeName(), request.getNodeType(), errorMessage));
+            errors.add(new CsvImportError(request.getNodeName(), request.getNodeType(), errorMessage));
             logger.info(String.format("Validation error for node %s with node type %s: %s", request.getNodeName(), request.getNodeType(), errorMessage));
             return true;
         }
         return false;
     }
 
-    private boolean hasNoParent(CsvRequest courseStructureObject, List<CourseImportError> errors) {
+    private boolean hasNoParent(CourseCsvRequest courseStructureObject, List<CsvImportError> errors) {
         if (!courseStructureObject.hasParent()) {
-            CourseImportError error = new CourseImportError(courseStructureObject.getNodeName(), courseStructureObject.getNodeType(), "All nodes other than course should have a parent node. Please ensure a parent node is specified and try importing again.");
+            CsvImportError error = new CsvImportError(courseStructureObject.getNodeName(), courseStructureObject.getNodeType(), "All nodes other than course should have a parent node. Please ensure a parent node is specified and try importing again.");
             errors.add(error);
             logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
             return true;
@@ -206,18 +207,18 @@ public class CourseStructureValidator {
         return false;
     }
 
-    private boolean hasInvalidParentType(CsvRequest request, List<CsvRequest> requests, List<CourseImportError> errors) {
+    private boolean hasInvalidParentType(CourseCsvRequest request, List<CourseCsvRequest> requests, List<CsvImportError> errors) {
         final String parentNodeName = request.getParentNode();
-        CsvRequest parentNode = (CsvRequest) CollectionUtils.find(requests, new Predicate() {
+        CourseCsvRequest parentNode = (CourseCsvRequest) CollectionUtils.find(requests, new Predicate() {
             @Override
             public boolean evaluate(Object object) {
-                CsvRequest otherRequest = (CsvRequest) object;
+                CourseCsvRequest otherRequest = (CourseCsvRequest) object;
                 return StringUtils.equals(otherRequest.getNodeName(), parentNodeName);
             }
         });
 
         if (parentNode != null && !request.hasValidParentType(parentNode.getNodeType())) {
-            CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "The parent node specified is of not of valid type. Please check the parent node name and try importing again.");
+            CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "The parent node specified is of not of valid type. Please check the parent node name and try importing again.");
             errors.add(error);
             logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
             return true;
@@ -225,18 +226,18 @@ public class CourseStructureValidator {
         return false;
     }
 
-    private boolean hasInvalidParentName(CsvRequest request, List<CsvRequest> requests, List<CourseImportError> errors) {
+    private boolean hasInvalidParentName(CourseCsvRequest request, List<CourseCsvRequest> requests, List<CsvImportError> errors) {
         final String parentNodeName = request.getParentNode();
         boolean parentNodeExists = CollectionUtils.exists(requests, new Predicate() {
             @Override
             public boolean evaluate(Object object) {
-                CsvRequest otherRequest = (CsvRequest) object;
+                CourseCsvRequest otherRequest = (CourseCsvRequest) object;
                 return StringUtils.equals(otherRequest.getNodeName(), parentNodeName);
             }
         });
 
         if (!parentNodeExists) {
-            CourseImportError error = new CourseImportError(request.getNodeName(), request.getNodeType(), "Could not find the parent node specified in the CSV. Please check the parent node name for spelling and try importing again.");
+            CsvImportError error = new CsvImportError(request.getNodeName(), request.getNodeType(), "Could not find the parent node specified in the CSV. Please check the parent node name for spelling and try importing again.");
             errors.add(error);
             logger.info(String.format("Validation error for node %s with node type %s: %s", error.getNodeName(), error.getNodeType(), error.getMessage()));
             return true;
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidator.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidator.java
new file mode 100644
index 0000000..b3faee8
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidator.java
@@ -0,0 +1,66 @@
+package org.motechproject.whp.mtraining.csv.validator;
+
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
+import org.motechproject.whp.mtraining.csv.request.ProviderCsvRequest;
+import org.springframework.stereotype.Component;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.apache.commons.lang.StringUtils.isNumeric;
+import static org.motechproject.whp.mtraining.web.domain.ActivationStatus.from;
+
+@Component
+public class ProviderStructureValidator {
+
+    public List<CsvImportError> validate(List<ProviderCsvRequest> providerCsvRequests) {
+        ArrayList<CsvImportError> errors = new ArrayList<>();
+        Set<String> remedyIds = new HashSet<>();
+        Set<String> contactNumbers = new HashSet<>();
+        for (ProviderCsvRequest providerCsvRequest : providerCsvRequests) {
+            String remedyId = providerCsvRequest.getRemedyId();
+            validateRemedyId(errors, providerCsvRequest, remedyIds);
+            validatePrimaryContactNumber(errors, providerCsvRequest, contactNumbers);
+
+            if (from(providerCsvRequest.getActivationStatus()) == null)
+                errors.add(new CsvImportError("Activation Status", "-", "Activation Status for Remedy Id: " + remedyId + " is blank or invalid."));
+
+            if (isBlank(providerCsvRequest.getBlock()))
+                errors.add(new CsvImportError("BLock", "-", "Block is blank for Remedy Id: " + remedyId + "."));
+
+            if (isBlank(providerCsvRequest.getDistrict()))
+                errors.add(new CsvImportError("BLock", "-", "District is blank for Remedy Id: " + remedyId + "."));
+
+            if (isBlank(providerCsvRequest.getState()))
+                errors.add(new CsvImportError("BLock", "-", "State is blank for Remedy Id: " + remedyId + "."));
+
+        }
+        return errors;
+    }
+
+    private void validatePrimaryContactNumber(ArrayList<CsvImportError> errors, ProviderCsvRequest providerCsvRequest, Set<String> contactNumbers) {
+        String primaryContactNumber = providerCsvRequest.getPrimaryContactNumber();
+        if (contactNumbers.contains(primaryContactNumber))
+            errors.add(new CsvImportError("Primary Contact has multiple occurrences."));
+        if (isBlank(primaryContactNumber) || !isNumeric(primaryContactNumber) || primaryContactNumber.length() != 10) {
+            errors.add(new CsvImportError("Primary Contact Number", "-", "Primary Contact Number is invalid for Remedy Id: " + providerCsvRequest.getRemedyId() + ". It should be a 10 digit phone number."));
+            return;
+        }
+        contactNumbers.add(primaryContactNumber);
+    }
+
+    private void validateRemedyId(ArrayList<CsvImportError> errors, ProviderCsvRequest providerCsvRequest, Set<String> remedyIds) {
+        String remedyId = providerCsvRequest.getRemedyId();
+        if (remedyIds.contains(remedyId))
+            errors.add(new CsvImportError("RemedyId", "-", "Remedy Id : " + remedyId + " has multiple occurrences. Remedy id should be unique."));
+        if (isBlank(remedyId)) {
+            errors.add(new CsvImportError("RemedyId", "-", "Remedy Id is not present for caller : " + providerCsvRequest.getPrimaryContactNumber()));
+            return;
+        }
+        remedyIds.add(remedyId);
+    }
+
+}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/domain/Provider.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/domain/Provider.java
index c007981..9b96a5f 100644
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/domain/Provider.java
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/domain/Provider.java
@@ -1,6 +1,5 @@
 package org.motechproject.whp.mtraining.domain;
 
-
 import org.motechproject.whp.mtraining.web.domain.ActivationStatus;
 
 import javax.jdo.annotations.Column;
@@ -22,12 +21,18 @@ public class Provider {
     private Long id;
 
     @Persistent(column = "primary_contact_number", defaultFetchGroup = "true")
+    @Unique(name = "primary_contact_number")
+    @NotNull
     private Long callerId;
 
-    @Column(name = "location_id")
-    private Location location;
+    @Column(name = "district", allowsNull = "false")
+    private String district;
+    @Column(name = "block", allowsNull = "false")
+    private String block;
+    @Column(name = "state", allowsNull = "false")
+    private String state;
 
-    @Column(name = "activation_status")
+    @Column(name = "activation_status", allowsNull = "false")
     private String activationStatus;
 
     @Column(name = "remedy_id")
@@ -35,13 +40,19 @@ public class Provider {
     @NotNull
     private String remedyId;
 
-    public Provider(Long callerId, Location location, ActivationStatus activationStatus) {
+    public Provider(String remedyId, Long callerId, ActivationStatus activationStatus, String district, String block, String state) {
         this.callerId = callerId;
-        this.location = location;
-        this.remedyId = randomAlphanumeric(20);
+        this.district = district;
+        this.block = block;
+        this.state = state;
+        this.remedyId = remedyId;
         this.activationStatus = activationStatus.getStatus();
     }
 
+    public Provider() {
+
+    }
+
     public Long getCallerId() {
         return callerId;
     }
@@ -50,10 +61,6 @@ public class Provider {
         return id;
     }
 
-    public Location getLocation() {
-        return location;
-    }
-
     public String getActivationStatus() {
         return activationStatus;
     }
@@ -61,4 +68,16 @@ public class Provider {
     public String getRemedyId() {
         return remedyId;
     }
-}
+
+    public String getDistrict() {
+        return district;
+    }
+
+    public String getBlock() {
+        return block;
+    }
+
+    public String getState() {
+        return state;
+    }
+}
\ No newline at end of file
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/CourseImportService.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/CourseImportService.java
index 5aeea0a..466da06 100644
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/CourseImportService.java
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/CourseImportService.java
@@ -5,7 +5,7 @@ import org.motechproject.mtraining.dto.CourseDto;
 import org.motechproject.mtraining.service.CourseService;
 import org.motechproject.security.model.UserDto;
 import org.motechproject.security.service.MotechUserService;
-import org.motechproject.whp.mtraining.csv.request.CsvRequest;
+import org.motechproject.whp.mtraining.csv.request.CourseCsvRequest;
 import org.motechproject.whp.mtraining.domain.Content;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
@@ -31,11 +31,10 @@ public class CourseImportService {
         this.motechUserService = motechUserService;
     }
 
-    public ContentIdentifierDto importCourse(List<CsvRequest> requests) {
-        Map<String, Content> contentMap = formContents(requests, contentAuthor());
 
+    public ContentIdentifierDto importCourse(List<CourseCsvRequest> requests) {
+        Map<String, Content> contentMap = formContents(requests, contentAuthor());
         addChildContents(contentMap, requests);
-
         Content courseContent = contentMap.get(requests.get(0).getNodeName());
         CourseDto courseDto = (CourseDto) courseContent.toDto();
         courseUpdater.update(asList(courseDto));
@@ -43,24 +42,24 @@ public class CourseImportService {
         return courseService.addOrUpdateCourse(courseDto);
     }
 
-    private Map<String, Content> formContents(List<CsvRequest> requests, String contentAuthor) {
+    private Map<String, Content> formContents(List<CourseCsvRequest> requests, String contentAuthor) {
         Map<String, Content> contentMap = new HashMap<>();
-        for (CsvRequest request : requests) {
+        for (CourseCsvRequest request : requests) {
             String noOfQuizQuestions = request.getNoOfQuizQuestions();
 
             Integer numberOfQuizQuestions = isBlank(noOfQuizQuestions) ? 0 : Integer.parseInt(noOfQuizQuestions);
             Long passPercentage = isBlank(request.getPassPercentage()) ? null : Long.parseLong(request.getPassPercentage());
 
             Content content = new Content(request.getNodeName(), request.getNodeType(), request.getStatus(), request.getDescription(),
-                                          request.getFileName(), numberOfQuizQuestions, request.getOptionsAsList(),
-                                          request.getCorrectAnswer(), request.getCorrectAnswerFileName(), passPercentage, contentAuthor);
+                    request.getFileName(), numberOfQuizQuestions, request.getOptionsAsList(),
+                    request.getCorrectAnswer(), request.getCorrectAnswerFileName(), passPercentage, contentAuthor);
             contentMap.put(request.getNodeName(), content);
         }
         return contentMap;
     }
 
-    private void addChildContents(Map<String, Content> contentMap, List<CsvRequest> requests) {
-        for (CsvRequest request : requests) {
+    private void addChildContents(Map<String, Content> contentMap, List<CourseCsvRequest> requests) {
+        for (CourseCsvRequest request : requests) {
             Content content = contentMap.get(request.getNodeName());
             Content parentContent = contentMap.get(request.getParentNode());
             if (parentContent != null)
@@ -72,7 +71,4 @@ public class CourseImportService {
         UserDto currentUser = motechUserService.getCurrentUser();
         return currentUser == null ? null : currentUser.getUserName();
     }
-
-
-}
-
+}
\ No newline at end of file
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/ProviderImportService.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/ProviderImportService.java
new file mode 100644
index 0000000..2a69942
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/service/impl/ProviderImportService.java
@@ -0,0 +1,38 @@
+package org.motechproject.whp.mtraining.service.impl;
+
+import org.motechproject.whp.mtraining.csv.request.ProviderCsvRequest;
+import org.motechproject.whp.mtraining.domain.Provider;
+import org.motechproject.whp.mtraining.repository.Providers;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+import static org.apache.commons.collections.CollectionUtils.isNotEmpty;
+import static org.motechproject.whp.mtraining.web.domain.ActivationStatus.from;
+
+@Service
+public class ProviderImportService {
+
+    private Providers providers;
+
+    @Autowired
+    public ProviderImportService(Providers providers) {
+        this.providers = providers;
+    }
+
+    public void importProviders(List<ProviderCsvRequest> providerCsvRequests) {
+        if (isNotEmpty(providers.all()))
+            throw new RuntimeException("Providers already exist in the database");
+        for (ProviderCsvRequest providerCsvRequest : providerCsvRequests) {
+            providers.add(createProvider(providerCsvRequest));
+        }
+    }
+
+    private Provider createProvider(ProviderCsvRequest providerCsvRequest) {
+        return new Provider(providerCsvRequest.getRemedyId(), Long.valueOf(providerCsvRequest.getPrimaryContactNumber()), from(providerCsvRequest.getActivationStatus()),
+                providerCsvRequest.getDistrict(), providerCsvRequest.getBlock(), providerCsvRequest.getState());
+    }
+}
+
+
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/BookmarkController.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/BookmarkController.java
index cf326ff..5a03153 100644
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/BookmarkController.java
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/BookmarkController.java
@@ -5,6 +5,7 @@ import org.motechproject.mtraining.dto.ContentIdentifierDto;
 import org.motechproject.mtraining.service.BookmarkService;
 import org.motechproject.mtraining.util.ISODateTimeUtil;
 import org.motechproject.whp.mtraining.domain.Course;
+import org.motechproject.whp.mtraining.domain.Location;
 import org.motechproject.whp.mtraining.domain.Provider;
 import org.motechproject.whp.mtraining.reports.domain.BookmarkReport;
 import org.motechproject.whp.mtraining.reports.domain.BookmarkRequest;
@@ -32,6 +33,8 @@ import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.ResponseBody;
 
 import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.motechproject.whp.mtraining.reports.domain.BookmarkRequestType.GET;
+import static org.motechproject.whp.mtraining.reports.domain.BookmarkRequestType.POST;
 import static org.motechproject.whp.mtraining.web.domain.ActivationStatus.isInvalid;
 import static org.motechproject.whp.mtraining.web.domain.ResponseStatus.MISSING_CALLER_ID;
 import static org.motechproject.whp.mtraining.web.domain.ResponseStatus.MISSING_SESSION_ID;
@@ -39,6 +42,7 @@ import static org.motechproject.whp.mtraining.web.domain.ResponseStatus.MISSING_
 import static org.motechproject.whp.mtraining.web.domain.ResponseStatus.NOT_WORKING_PROVIDER;
 import static org.motechproject.whp.mtraining.web.domain.ResponseStatus.OK;
 import static org.motechproject.whp.mtraining.web.domain.ResponseStatus.UNKNOWN_PROVIDER;
+import static org.springframework.http.HttpStatus.CREATED;
 
 @Controller
 public class BookmarkController {
@@ -67,19 +71,20 @@ public class BookmarkController {
         String currentSessionId = currentSession(sessionId);
         LOGGER.debug(String.format("Received bookmarkDto request for caller %s with session %s and uniqueId %s", callerId, sessionId, uniqueId));
         if (callerId == null)
-            return responseFor(null, uniqueId, currentSessionId, BookmarkRequestType.GET, MISSING_CALLER_ID);
+            return responseFor(null, uniqueId, currentSessionId, GET, MISSING_CALLER_ID);
         if (isBlank(uniqueId))
-            return responseFor(callerId, null, currentSessionId, BookmarkRequestType.GET, MISSING_UNIQUE_ID);
+            return responseFor(callerId, null, currentSessionId, GET, MISSING_UNIQUE_ID);
 
         Provider provider = providers.getByCallerId(callerId);
         if (provider == null)
-            return responseFor(callerId, uniqueId, currentSessionId, BookmarkRequestType.GET, UNKNOWN_PROVIDER);
+            return responseFor(callerId, uniqueId, currentSessionId, GET, UNKNOWN_PROVIDER);
         if (isInvalid(provider.getActivationStatus()))
-            return responseFor(callerId, uniqueId, currentSessionId, BookmarkRequestType.GET, NOT_WORKING_PROVIDER);
+            return responseFor(callerId, uniqueId, currentSessionId, GET, NOT_WORKING_PROVIDER);
 
         BookmarkDto bookmarkDto = getBookmark(provider.getRemedyId());
-        allBookmarkRequests.add(new BookmarkRequest(provider.getRemedyId(), callerId, uniqueId, currentSessionId, OK, BookmarkRequestType.GET, new BookmarkReport(bookmarkDto)));
-        return new ResponseEntity<>(new BookmarkResponse(callerId, currentSessionId, uniqueId, provider.getLocation(), mapToBookmark(bookmarkDto)), HttpStatus.OK);
+        allBookmarkRequests.add(new BookmarkRequest(provider.getRemedyId(), callerId, uniqueId, currentSessionId, OK, GET, new BookmarkReport(bookmarkDto)));
+        return new ResponseEntity<>(new BookmarkResponse(callerId, currentSessionId, uniqueId,
+                new Location(provider.getBlock(), provider.getDistrict(), provider.getState()), mapToBookmark(bookmarkDto)), HttpStatus.OK);
     }
 
     @RequestMapping(value = "/bookmark", method = RequestMethod.POST, consumes = "application/json")
@@ -91,13 +96,13 @@ public class BookmarkController {
         String sessionId = bookmarkPostRequest.getSessionId();
 
         if (callerId == null) {
-            return responseFor(null, uniqueId, sessionId, BookmarkRequestType.POST, MISSING_CALLER_ID);
+            return responseFor(null, uniqueId, sessionId, POST, MISSING_CALLER_ID);
         }
         if (isBlank(uniqueId)) {
-            return responseFor(callerId, null, sessionId, BookmarkRequestType.POST, MISSING_UNIQUE_ID);
+            return responseFor(callerId, null, sessionId, POST, MISSING_UNIQUE_ID);
         }
         if (isBlank(sessionId)) {
-            return responseFor(callerId, uniqueId, null, BookmarkRequestType.POST, MISSING_SESSION_ID);
+            return responseFor(callerId, uniqueId, null, POST, MISSING_SESSION_ID);
         }
         Bookmark bookmark = bookmarkPostRequest.getBookmark();
 
@@ -108,14 +113,14 @@ public class BookmarkController {
         Provider provider = providers.getByCallerId(callerId);
 
         if (provider == null) {
-            return responseFor(callerId, uniqueId, sessionId, BookmarkRequestType.POST, UNKNOWN_PROVIDER);
+            return responseFor(callerId, uniqueId, sessionId, POST, UNKNOWN_PROVIDER);
         }
 
         BookmarkDto bookmarkDto = new BookmarkDto(provider.getRemedyId(), bookmark.getCourseIdentifierDto(), bookmark.getModuleIdentifierDto(),
                 bookmark.getChapterIdentifierDto(), bookmark.getMessageIdentifierDto(), ISODateTimeUtil.parseWithTimeZoneUTC(bookmark.getDateModified()));
         bookmarkService.update(bookmarkDto);
-        allBookmarkRequests.add(new BookmarkRequest(provider.getRemedyId(), callerId, uniqueId, sessionId, OK, BookmarkRequestType.POST, new BookmarkReport(bookmarkDto)));
-        return responseFor(callerId, uniqueId, sessionId, OK, BookmarkRequestType.POST, HttpStatus.CREATED);
+        allBookmarkRequests.add(new BookmarkRequest(provider.getRemedyId(), callerId, uniqueId, sessionId, OK, POST, new BookmarkReport(bookmarkDto)));
+        return responseFor(callerId, uniqueId, sessionId, OK, POST, CREATED);
     }
 
     private Bookmark mapToBookmark(BookmarkDto bookmarkDto) {
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/CourseImportController.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/CourseImportController.java
index 6358201..6113f9f 100644
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/CourseImportController.java
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/CourseImportController.java
@@ -3,9 +3,9 @@ package org.motechproject.whp.mtraining.web.controller;
 
 import org.motechproject.mtraining.dto.ContentIdentifierDto;
 import org.motechproject.whp.mtraining.csv.parser.CsvParser;
-import org.motechproject.whp.mtraining.csv.request.CsvRequest;
-import org.motechproject.whp.mtraining.csv.response.CourseImportResponse;
-import org.motechproject.whp.mtraining.csv.validator.CourseImportError;
+import org.motechproject.whp.mtraining.csv.request.CourseCsvRequest;
+import org.motechproject.whp.mtraining.csv.response.CsvImportResponse;
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
 import org.motechproject.whp.mtraining.csv.validator.CourseStructureValidator;
 import org.motechproject.whp.mtraining.service.impl.CourseImportService;
 import org.slf4j.Logger;
@@ -20,6 +20,7 @@ import org.springframework.web.multipart.commons.CommonsMultipartFile;
 
 import java.util.List;
 
+import static java.lang.String.format;
 import static java.util.Arrays.asList;
 
 @Controller
@@ -39,18 +40,20 @@ public class CourseImportController {
 
     @RequestMapping(value = "/course-structure/import", method = RequestMethod.POST)
     @ResponseBody
-    public CourseImportResponse importCourseStructure(@RequestParam("multipartFile") CommonsMultipartFile multipartFile) {
+    public CsvImportResponse importCourseStructure(@RequestParam("multipartFile") CommonsMultipartFile multipartFile) {
         try {
-            List<CsvRequest> CsvRequests = csvParser.parse(multipartFile, CsvRequest.class);
-            List<CourseImportError> errors = courseStructureValidator.validate(CsvRequests);
+            List<CourseCsvRequest> courseCsvRequests = csvParser.parse(multipartFile, CourseCsvRequest.class);
+            List<CsvImportError> errors = courseStructureValidator.validate(courseCsvRequests);
             if (!errors.isEmpty()) {
-                return CourseImportResponse.failure(errors);
+                return CsvImportResponse.failure(errors);
             }
-            ContentIdentifierDto importedCourseIdentifier = courseImportService.importCourse(CsvRequests);
-            return CourseImportResponse.success(importedCourseIdentifier);
+            ContentIdentifierDto importedCourseIdentifier = courseImportService.importCourse(courseCsvRequests);
+            return CsvImportResponse.success(format("Course: %s with version %s has been imported successfully",
+                    importedCourseIdentifier.getContentId(),
+                    importedCourseIdentifier.getVersion()));
         } catch (Exception ex) {
             LOG.error(ex.getMessage());
-            return CourseImportResponse.failure(asList(new CourseImportError(ex.getMessage())));
+            return CsvImportResponse.failure(asList(new CsvImportError(ex.getMessage())));
         }
     }
 }
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/ProviderImportController.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/ProviderImportController.java
new file mode 100644
index 0000000..d6ddd34
--- /dev/null
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/controller/ProviderImportController.java
@@ -0,0 +1,55 @@
+package org.motechproject.whp.mtraining.web.controller;
+
+
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
+import org.motechproject.whp.mtraining.csv.parser.CsvParser;
+import org.motechproject.whp.mtraining.csv.request.ProviderCsvRequest;
+import org.motechproject.whp.mtraining.csv.response.CsvImportResponse;
+import org.motechproject.whp.mtraining.csv.validator.ProviderStructureValidator;
+import org.motechproject.whp.mtraining.service.impl.ProviderImportService;
+import org.slf4j.Logger;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Controller;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.ResponseBody;
+import org.springframework.web.multipart.commons.CommonsMultipartFile;
+
+import java.util.List;
+
+import static java.util.Arrays.asList;
+import static org.slf4j.LoggerFactory.getLogger;
+
+@Controller
+public class ProviderImportController {
+    private Logger LOG = getLogger(ProviderImportController.class);
+
+    private CsvParser csvParser;
+    private ProviderStructureValidator providerStructureValidator;
+    private ProviderImportService providerImportService;
+
+    @Autowired
+    public ProviderImportController(CsvParser csvParser, ProviderStructureValidator providerStructureValidator, ProviderImportService providerImportService) {
+        this.csvParser = csvParser;
+        this.providerStructureValidator = providerStructureValidator;
+        this.providerImportService = providerImportService;
+    }
+
+    @RequestMapping(value = "/provider/import", method = RequestMethod.POST)
+    @ResponseBody
+    public CsvImportResponse importProviderStructure(@RequestParam("multipartFile") CommonsMultipartFile multipartFile) {
+        try {
+            List<ProviderCsvRequest> providerCsvRequests = csvParser.parse(multipartFile, ProviderCsvRequest.class);
+            List<CsvImportError> errors = providerStructureValidator.validate(providerCsvRequests);
+            if (!errors.isEmpty()) {
+                return CsvImportResponse.failure(errors);
+            }
+            providerImportService.importProviders(providerCsvRequests);
+            return CsvImportResponse.success("Providers have been successfully imported");
+        } catch (Exception ex) {
+            LOG.error(ex.getMessage());
+            return CsvImportResponse.failure(asList(new CsvImportError(ex.getMessage())));
+        }
+    }
+}
diff --git a/mtraining/src/main/java/org/motechproject/whp/mtraining/web/domain/ActivationStatus.java b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/domain/ActivationStatus.java
index b89552d..6477b45 100644
--- a/mtraining/src/main/java/org/motechproject/whp/mtraining/web/domain/ActivationStatus.java
+++ b/mtraining/src/main/java/org/motechproject/whp/mtraining/web/domain/ActivationStatus.java
@@ -29,7 +29,7 @@ public enum ActivationStatus {
         return Arrays.asList(ELIMINATED_RHP, ELIMINATED_TPC, LEFT_NETWORK_RH, LEFT_NETWORK_TP).contains(from(status));
     }
 
-    private static ActivationStatus from(String status) {
+    public static ActivationStatus from(String status) {
         ActivationStatus[] values = ActivationStatus.values();
         for (ActivationStatus value : values) {
             if (value.getStatus().equalsIgnoreCase(status))
diff --git a/mtraining/src/main/resources/db/migration/V23__add_location_to_provider_table.sql b/mtraining/src/main/resources/db/migration/V23__add_location_to_provider_table.sql
new file mode 100644
index 0000000..d32dd2b
--- /dev/null
+++ b/mtraining/src/main/resources/db/migration/V23__add_location_to_provider_table.sql
@@ -0,0 +1,3 @@
+ALTER TABLE mtraining.provider DROP COLUMN location_id, DROP COLUMN first_name, DROP COLUMN last_name;
+DROP  TABLE mtraining.location;
+ALTER TABLE mtraining.provider ADD COLUMN district varchar(20), ADD COLUMN block varchar(20), ADD COLUMN state varchar(20);
diff --git a/mtraining/src/main/resources/webapp/css/base.css b/mtraining/src/main/resources/webapp/css/base.css
index 7a94ad0..2aa3565 100644
--- a/mtraining/src/main/resources/webapp/css/base.css
+++ b/mtraining/src/main/resources/webapp/css/base.css
@@ -1 +1,24 @@
-/* put your custom styles here */
\ No newline at end of file
+main {
+    margin-top: 20px;
+}
+
+.btnContainer {
+    margin: 20px;
+}
+
+.chooseFileBtn {
+    width: 80%;
+}
+
+.response {
+    margin-top: 20px;
+}
+
+.mtrain-spinner {
+    height: 32px;
+    width: 32px;
+    background: url('../images/spinner.gif') center no-repeat;
+    display: inline-block;
+    float: left;
+    margin-left: 20px;
+}
diff --git a/mtraining/src/main/resources/webapp/images/spinner.gif b/mtraining/src/main/resources/webapp/images/spinner.gif
new file mode 100644
index 0000000000000000000000000000000000000000..95ea5eb466e160bbf59d0f48f2faca997c4b7612
GIT binary patch
literal 34182
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
O3&6LSyY7_EM*jm^fRc{@

literal 0
HcmV?d00001

diff --git a/mtraining/src/main/resources/webapp/index.html b/mtraining/src/main/resources/webapp/index.html
index 7b27844..f8834fc 100644
--- a/mtraining/src/main/resources/webapp/index.html
+++ b/mtraining/src/main/resources/webapp/index.html
@@ -1,36 +1,33 @@
-<br/>
-<br/>
 <div ng-controller="fileUploadController" class="table col-lg-10 main-content">
     <main role="main">
         <div class="box-header">Upload CSV</div>
         <div class="box-content gutter-border">
-            <div class="row">
+            <div class="row btnContainer">
                 <form role="form" class="form-inline">
-                    <br/>
-
                     <div class="form-group col-xs-offset-1 col-lg-5">
-                        <input class="btn btn-default btn-file col-lg-11" type="file" file-model="multipartFile"/>
+                        <input class="btn btn-default btn-file col-lg-5 chooseFileBtn" type="file"
+                               file-model="multipartFile"/>
                     </div>
                     <div class="form-group">
-                        <span class="form-control btn btn-default" ng-click="uploadFile()">
-                            Upload File
-                        </span>
+                        <input type="button" class="providerUpload form-control btn btn-default" value="Upload Course"
+                               ng-click="uploadCourse()" ng-disabled="uploading || !multipartFile"/>
+                    </div>
+                    <div class="mtrain-spinner" ng-show="uploading"></div>
+                    <div class="form-group col-xs-offset-1">
+                        <input type="button" class="providerUpload form-control btn btn-default" value="Upload Provider"
+                               ng-click="uploadProvider()" ng-disabled="uploading || !multipartFile"/>
                     </div>
+                    <div class="mtrain-spinner" ng-show="uploading"></div>
                 </form>
             </div>
-            <br/>
         </div>
-        <br/>
-        <br/>
 
-        <div>
+        <div class="response" ng-hide="multipartFile">
             <div ng-show="response.status=='SUCCESS'">
                 <ul class="alert alert-success">{{response.message}}</ul>
             </div>
-
             <div ng-show="response.status=='FAILURE'">
                 <ul class="alert alert-danger">{{response.message}}</ul>
-
                 <table class="table table-hover table-bordered">
                     <tr>
                         <th class="col-lg-2">nodeName</th>
diff --git a/mtraining/src/main/resources/webapp/js/app.js b/mtraining/src/main/resources/webapp/js/app.js
index 1b938df..5c7aa1c 100644
--- a/mtraining/src/main/resources/webapp/js/app.js
+++ b/mtraining/src/main/resources/webapp/js/app.js
@@ -3,6 +3,5 @@
     'use strict';
 
     angular.module('mtraining', ['motech-dashboard']);
-    var mtrainingModule = angular.module("mtraining");
 
 }());
\ No newline at end of file
diff --git a/mtraining/src/main/resources/webapp/js/controllers.js b/mtraining/src/main/resources/webapp/js/controllers.js
deleted file mode 100644
index c7e5410..0000000
--- a/mtraining/src/main/resources/webapp/js/controllers.js
+++ /dev/null
@@ -1,32 +0,0 @@
-var mtrainingModule = angular.module("mtraining");
-
-mtrainingModule.controller("mTrainingController", function ($scope) {
-    $scope.message = "WHP M-Training Bundle";
-});
-
-mtrainingModule.controller('fileUploadController', ['$scope', '$fileUpload', function ($scope, $fileUpload) {
-    $scope.response = null;
-    $scope.uploadFile = function () {
-        var multipartFile = $scope.multipartFile;
-        console.log('multipartFile is ' + JSON.stringify(multipartFile));
-        var uploadUrl = "../mtraining/web-api/course-structure/import";
-
-
-        $fileUpload.uploadFileToUrl(multipartFile, uploadUrl).then(function (data) {
-            $scope.response = data;
-        }, function (error) {
-            console.log("there was an error getting new cool data");
-        });
-        clearFileName();
-    };
-
-    clearFileName = function () {
-        angular.forEach(
-            angular.element("input[type='file']"),
-            function (inputElem) {
-                angular.element(inputElem).val(null);
-            });
-    };
-
-}]);
-
diff --git a/mtraining/src/main/resources/webapp/js/directives.js b/mtraining/src/main/resources/webapp/js/directives.js
deleted file mode 100644
index 4da4fc0..0000000
--- a/mtraining/src/main/resources/webapp/js/directives.js
+++ /dev/null
@@ -1,17 +0,0 @@
-var mtrainingModule = angular.module("mtraining");
-mtrainingModule.directive('fileModel', ['$parse', function ($parse) {
-    return {
-        restrict: 'A',
-        link: function (scope, element, attrs) {
-            var model = $parse(attrs.fileModel);
-            var modelSetter = model.assign;
-
-            element.bind('change', function () {
-                scope.$apply(function () {
-                    modelSetter(scope, element[0].files[0]);
-                });
-            });
-        }
-    };
-}]);
-
diff --git a/mtraining/src/main/resources/webapp/js/fileModelDirective.js b/mtraining/src/main/resources/webapp/js/fileModelDirective.js
new file mode 100644
index 0000000..4da4fc0
--- /dev/null
+++ b/mtraining/src/main/resources/webapp/js/fileModelDirective.js
@@ -0,0 +1,17 @@
+var mtrainingModule = angular.module("mtraining");
+mtrainingModule.directive('fileModel', ['$parse', function ($parse) {
+    return {
+        restrict: 'A',
+        link: function (scope, element, attrs) {
+            var model = $parse(attrs.fileModel);
+            var modelSetter = model.assign;
+
+            element.bind('change', function () {
+                scope.$apply(function () {
+                    modelSetter(scope, element[0].files[0]);
+                });
+            });
+        }
+    };
+}]);
+
diff --git a/mtraining/src/main/resources/webapp/js/fileUploadController.js b/mtraining/src/main/resources/webapp/js/fileUploadController.js
new file mode 100644
index 0000000..9091886
--- /dev/null
+++ b/mtraining/src/main/resources/webapp/js/fileUploadController.js
@@ -0,0 +1,40 @@
+var mtrainingModule = angular.module("mtraining");
+
+mtrainingModule.controller('fileUploadController', ['$scope', 'fileUpload', function ($scope, fileUpload) {
+    $scope.uploading = false;
+    $scope.response = undefined;
+    $scope.uploadCourse = function () {
+        $scope.uploading = true;
+        var uploadUrl = "../mtraining/web-api/course-structure/import";
+        fileUpload.uploadFileToUrl($scope.multipartFile, uploadUrl,
+            function success(data) {
+                $scope.response = data;
+                clearFileName();
+            }, function () {
+                clearFileName();
+            });
+    };
+
+    $scope.uploadProvider = function () {
+        $scope.uploading = true;
+        var uploadUrl = "../mtraining/web-api/provider/import";
+        fileUpload.uploadFileToUrl($scope.multipartFile, uploadUrl,
+            function success(data) {
+                $scope.response = data;
+                clearFileName();
+            }, function () {
+                clearFileName();
+            });
+    };
+
+    var clearFileName = function () {
+        $scope.uploading = false;
+        $scope.multipartFile = undefined;
+        angular.forEach(
+            angular.element("input[type='file']"),
+            function (inputElem) {
+                angular.element(inputElem).val(null);
+            });
+    };
+}]);
+
diff --git a/mtraining/src/main/resources/webapp/js/fileUploadService.js b/mtraining/src/main/resources/webapp/js/fileUploadService.js
new file mode 100644
index 0000000..786b3b8
--- /dev/null
+++ b/mtraining/src/main/resources/webapp/js/fileUploadService.js
@@ -0,0 +1,16 @@
+var mtrainingModule = angular.module("mtraining");
+mtrainingModule.service('fileUpload', ['$http', function ($http) {
+    this.uploadFileToUrl = function (multipartFile, uploadUrl, successCallback, errorCallback) {
+        var fd = new FormData();
+        fd.append('multipartFile', multipartFile);
+        $http.post(uploadUrl, fd, {
+            transformRequest: angular.identity,
+            headers: {'Content-Type': undefined}
+        }).success(function (data) {
+                successCallback(data)
+            })
+            .error(function (data) {
+                errorCallback(data)
+            });
+    }
+}]);
diff --git a/mtraining/src/main/resources/webapp/js/services.js b/mtraining/src/main/resources/webapp/js/services.js
deleted file mode 100644
index b653283..0000000
--- a/mtraining/src/main/resources/webapp/js/services.js
+++ /dev/null
@@ -1,21 +0,0 @@
-/* put your angular services here */
-var mtrainingModule = angular.module("mtraining");
-mtrainingModule.service('$fileUpload', ['$http', '$q', function ($http, $q) {
-    this.uploadFileToUrl = function (multipartFile, uploadUrl) {
-        var fd = new FormData();
-        fd.append('multipartFile', multipartFile);
-        var deferred = $q.defer();
-        $http.post(uploadUrl, fd, {
-            transformRequest: angular.identity,
-            headers: {'Content-Type': undefined}
-        })
-            .success(function (data) {
-                deferred.resolve(data);
-
-            })
-            .error(function (data) {
-                console.log("there is something wrong with csv");
-            });
-        return deferred.promise;
-    }
-}]);
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/parser/CsvParserTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/parser/CsvParserTest.java
index 416e2c3..3f3e687 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/parser/CsvParserTest.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/parser/CsvParserTest.java
@@ -1,7 +1,7 @@
 package org.motechproject.whp.mtraining.csv.parser;
 
 import org.junit.Test;
-import org.motechproject.whp.mtraining.csv.request.CsvRequest;
+import org.motechproject.whp.mtraining.csv.request.CourseCsvRequest;
 import org.springframework.mock.web.MockMultipartFile;
 
 import java.io.File;
@@ -26,7 +26,7 @@ public class CsvParserTest {
         InputStream inputStream = getFileInputStream(resourceName);
         mockMultipartFile = new MockMultipartFile(resourceName, resourceName, "", inputStream);
 
-        List<CsvRequest> actualCourseCsvContent = csvParser.parse(mockMultipartFile, CsvRequest.class);
+        List<CourseCsvRequest> actualCourseCsvContent = csvParser.parse(mockMultipartFile, CourseCsvRequest.class);
 
         assertEquals(4, actualCourseCsvContent.size());
     }
@@ -37,7 +37,7 @@ public class CsvParserTest {
         InputStream inputStream = getFileInputStream(resourceName);
         mockMultipartFile = new MockMultipartFile(resourceName, resourceName, "", inputStream);
 
-        List<CsvRequest> actualCourseCsvContent = csvParser.parse(mockMultipartFile, CsvRequest.class);
+        List<CourseCsvRequest> actualCourseCsvContent = csvParser.parse(mockMultipartFile, CourseCsvRequest.class);
 
         assertEquals(4, actualCourseCsvContent.size());
     }
@@ -47,7 +47,7 @@ public class CsvParserTest {
         String resourceName = "fileWithMissingHeading.csv";
         InputStream inputStream = getFileInputStream(resourceName);
         mockMultipartFile = new MockMultipartFile(resourceName, resourceName, "", inputStream);
-        csvParser.parse(mockMultipartFile, CsvRequest.class);
+        csvParser.parse(mockMultipartFile, CourseCsvRequest.class);
     }
 
     private InputStream getFileInputStream(String resourceName) throws URISyntaxException, FileNotFoundException {
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequestTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequestTest.java
new file mode 100644
index 0000000..77cc9ee
--- /dev/null
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/CourseCsvRequestTest.java
@@ -0,0 +1,68 @@
+package org.motechproject.whp.mtraining.csv.request;
+
+import org.hamcrest.core.Is;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class CourseCsvRequestTest {
+
+    @Test
+    public void testThatNodeIsACourse() throws Exception {
+        CourseCsvRequest course = new CourseCsvRequest("Basic TB Symptoms", "Course", "Active", null, "Message Description", null);
+        assertThat(course.isCourse(), Is.is(true));
+
+        CourseCsvRequest module = new CourseCsvRequest("Basic TB Symptoms", "Module", "Active", null, "Message Description", null);
+        assertThat(module.isCourse(), Is.is(false));
+
+        CourseCsvRequest invalidNode = new CourseCsvRequest("Basic TB Symptoms", null, "Active", null, "Message Description", null);
+        assertThat(invalidNode.isCourse(), Is.is(false));
+    }
+
+    @Test
+    public void testThatNodeIsMessage() throws Exception {
+        CourseCsvRequest message = new CourseCsvRequest("Basic TB Symptoms", "Message", "Active", "parentNode", "Message Description", null);
+        assertThat(message.isMessage(), Is.is(true));
+
+        CourseCsvRequest course = new CourseCsvRequest("Basic TB Symptoms", "Course", "Active", null, "Message Description", null);
+        assertThat(course.isMessage(), Is.is(false));
+
+        CourseCsvRequest invalidNode = new CourseCsvRequest("Basic TB Symptoms", null, "Active", null, "Message Description", null);
+        assertThat(invalidNode.isMessage(), Is.is(false));
+
+    }
+
+    @Test
+    public void shouldIndicateIfMessageHasAFileName() throws Exception {
+        CourseCsvRequest messageWithFile = new CourseCsvRequest("Basic TB Symptoms", "Message", "Active", "parentNode", "Message Description", "some_file.wav");
+        assertThat(messageWithFile.hasFileName(), Is.is(true));
+
+        CourseCsvRequest messageWithoutFile = new CourseCsvRequest("Basic TB Symptoms", "Message", "Active", "parentNode", "Message Description", null);
+        assertThat(messageWithoutFile.hasFileName(), Is.is(false));
+
+    }
+
+    @Test
+    public void testThatNodeHasAParentNode() throws Exception {
+        CourseCsvRequest course = new CourseCsvRequest("Basic TB Symptoms", "Course", "Active", "parentNode", "Message Description", null);
+        assertThat(course.hasParent(), Is.is(true));
+    }
+
+    @Test
+    public void testThatNodeHasValidStatus() {
+        CourseCsvRequest courseWithActiveStatus = new CourseCsvRequest("Basic TB Symptoms", "Course", "Active", "parentNode", "Message Description", null);
+        assertTrue(courseWithActiveStatus.isValidStatus());
+
+        CourseCsvRequest courseWithInActiveStatus = new CourseCsvRequest("Basic TB Symptoms", "Course", "inActive", "parentNode", "Message Description", null);
+        assertTrue(courseWithInActiveStatus.isValidStatus());
+
+        CourseCsvRequest courseWithNullStatus = new CourseCsvRequest("Basic TB Symptoms", "Course", null, "parentNode", "Message Description", null);
+        assertTrue(courseWithNullStatus.isValidStatus());
+
+        CourseCsvRequest courseWithBlankStatus = new CourseCsvRequest("Basic TB Symptoms", "Course", "  ", "parentNode", "Message Description", null);
+        assertTrue(courseWithBlankStatus.isValidStatus());
+
+        CourseCsvRequest courseWithWrongStatus = new CourseCsvRequest("Basic TB Symptoms", "Course", "status", "parentNode", "Message Description", null);
+        assertFalse(courseWithWrongStatus.isValidStatus());
+    }
+}
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/csvRequestTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/csvRequestTest.java
deleted file mode 100644
index 0b5c70f..0000000
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/request/csvRequestTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package org.motechproject.whp.mtraining.csv.request;
-
-import org.hamcrest.core.Is;
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class csvRequestTest {
-
-    @Test
-    public void testThatNodeIsACourse() throws Exception {
-        CsvRequest course = new CsvRequest("Basic TB Symptoms", "Course", "Active", null, "Message Description", null);
-        assertThat(course.isCourse(), Is.is(true));
-
-        CsvRequest module = new CsvRequest("Basic TB Symptoms", "Module", "Active", null, "Message Description", null);
-        assertThat(module.isCourse(), Is.is(false));
-
-        CsvRequest invalidNode = new CsvRequest("Basic TB Symptoms", null, "Active", null, "Message Description", null);
-        assertThat(invalidNode.isCourse(), Is.is(false));
-    }
-
-    @Test
-    public void testThatNodeIsMessage() throws Exception {
-        CsvRequest message = new CsvRequest("Basic TB Symptoms", "Message", "Active", "parentNode", "Message Description", null);
-        assertThat(message.isMessage(), Is.is(true));
-
-        CsvRequest course = new CsvRequest("Basic TB Symptoms", "Course", "Active", null, "Message Description", null);
-        assertThat(course.isMessage(), Is.is(false));
-
-        CsvRequest invalidNode = new CsvRequest("Basic TB Symptoms", null, "Active", null, "Message Description", null);
-        assertThat(invalidNode.isMessage(), Is.is(false));
-
-    }
-
-    @Test
-    public void shouldIndicateIfMessageHasAFileName() throws Exception {
-        CsvRequest messageWithFile = new CsvRequest("Basic TB Symptoms", "Message", "Active", "parentNode", "Message Description", "some_file.wav");
-        assertThat(messageWithFile.hasFileName(), Is.is(true));
-
-        CsvRequest messageWithoutFile = new CsvRequest("Basic TB Symptoms", "Message", "Active", "parentNode", "Message Description", null);
-        assertThat(messageWithoutFile.hasFileName(), Is.is(false));
-
-    }
-
-    @Test
-    public void testThatNodeHasAParentNode() throws Exception {
-        CsvRequest course = new CsvRequest("Basic TB Symptoms", "Course", "Active", "parentNode", "Message Description", null);
-        assertThat(course.hasParent(), Is.is(true));
-    }
-
-    @Test
-    public void testThatNodeHasValidStatus() {
-        CsvRequest courseWithActiveStatus = new CsvRequest("Basic TB Symptoms", "Course", "Active", "parentNode", "Message Description", null);
-        assertTrue(courseWithActiveStatus.isValidStatus());
-
-        CsvRequest courseWithInActiveStatus = new CsvRequest("Basic TB Symptoms", "Course", "inActive", "parentNode", "Message Description", null);
-        assertTrue(courseWithInActiveStatus.isValidStatus());
-
-        CsvRequest courseWithNullStatus = new CsvRequest("Basic TB Symptoms", "Course", null, "parentNode", "Message Description", null);
-        assertTrue(courseWithNullStatus.isValidStatus());
-
-        CsvRequest courseWithBlankStatus = new CsvRequest("Basic TB Symptoms", "Course", "  ", "parentNode", "Message Description", null);
-        assertTrue(courseWithBlankStatus.isValidStatus());
-
-        CsvRequest courseWithWrongStatus = new CsvRequest("Basic TB Symptoms", "Course", "status", "parentNode", "Message Description", null);
-        assertFalse(courseWithWrongStatus.isValidStatus());
-    }
-}
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidatorTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidatorTest.java
index dc40a7e..a5e2641 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidatorTest.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/CourseStructureValidatorTest.java
@@ -8,7 +8,8 @@ import org.mockito.runners.MockitoJUnitRunner;
 import org.motechproject.mtraining.dto.CourseDto;
 import org.motechproject.mtraining.dto.ModuleDto;
 import org.motechproject.mtraining.service.CourseService;
-import org.motechproject.whp.mtraining.csv.request.CsvRequest;
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
+import org.motechproject.whp.mtraining.csv.request.CourseCsvRequest;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -27,17 +28,17 @@ public class CourseStructureValidatorTest {
     private CourseService courseService;
 
     private CourseStructureValidator courseStructureValidator;
-    private List<CsvRequest> courseStructureCsvs;
-    private List<CourseImportError> errors;
+    private List<CourseCsvRequest> courseStructureCsvs;
+    private List<CsvImportError> errors;
 
     @Before
     public void setUp() throws Exception {
         courseStructureValidator = new CourseStructureValidator(courseService);
         courseStructureCsvs = new ArrayList<>();
-        courseStructureCsvs.add(new CsvRequest("Basic TB Symptoms", "Course", "Active", null, "Message Description", null));
-        courseStructureCsvs.add(new CsvRequest("Module TB Symptoms", "Module", "Active", "Basic TB Symptoms", "Message Description", null));
-        courseStructureCsvs.add(new CsvRequest("Chapter TB Symptoms", "Chapter", "Active", "Module TB Symptoms", "Message Description", null));
-        courseStructureCsvs.add(new CsvRequest("Message TB Symptoms", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest("Basic TB Symptoms", "Course", "Active", null, "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Module TB Symptoms", "Module", "Active", "Basic TB Symptoms", "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Chapter TB Symptoms", "Chapter", "Active", "Module TB Symptoms", "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Message TB Symptoms", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
 
         when(courseService.getAllCourses()).thenReturn(Collections.<CourseDto>emptyList());
     }
@@ -59,7 +60,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorIfCSVHasMoreThanOneCourse() {
-        courseStructureCsvs.add(new CsvRequest("Basic Malaria Symptoms", "Course", "Active", null, "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Basic Malaria Symptoms", "Course", "Active", null, "Message Description", null));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertThat(errors.size(), is(1));
         assertEquals("There are multiple course nodes in the CSV. Please ensure there is only 1 course node in the CSV and try importing again.", errors.get(0).getMessage());
@@ -67,7 +68,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorWhenNodeWithSameNameExists() {
-        courseStructureCsvs.add(new CsvRequest("Message TB Symptoms", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest("Message TB Symptoms", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(2, errors.size());
         assertEquals("There are 2 or more nodes with the same name: Message TB Symptoms. Please ensure the nodes are named differently and try importing again.", errors.get(0).getMessage());
@@ -75,11 +76,11 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorWhenNodeDoesNotHaveName() {
-        courseStructureCsvs.add(new CsvRequest("", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
-        courseStructureCsvs.add(new CsvRequest(null, "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
-        courseStructureCsvs.add(new CsvRequest("   ", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest("", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest(null, "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest("   ", "Message", "Active", "Chapter TB Symptoms", "Message Description", "FileName"));
 
-        List<CourseImportError> errors = courseStructureValidator.validate(courseStructureCsvs);
+        List<CsvImportError> errors = courseStructureValidator.validate(courseStructureCsvs);
 
         assertEquals(3, errors.size());
         assertEquals("Name not specified. Please specify the node name and try importing again.", errors.get(0).getMessage());
@@ -89,7 +90,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorWhenParentNodeIsAbsent() {
-        courseStructureCsvs.add(new CsvRequest("Message TB Symptoms New", "Message", "Active", null, "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Message TB Symptoms New", "Message", "Active", null, "Message Description", null));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(1, errors.size());
         assertEquals("All nodes other than course should have a parent node. Please ensure a parent node is specified and try importing again.", errors.get(0).getMessage());
@@ -97,7 +98,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorWhenParentHasInvalidName() {
-        courseStructureCsvs.add(new CsvRequest("New TB Symptoms", "Message", "Active", "Module TB Symptoms Invalid", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest("New TB Symptoms", "Message", "Active", "Module TB Symptoms Invalid", "Message Description", "FileName"));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(1, errors.size());
         assertEquals("Could not find the parent node specified in the CSV. Please check the parent node name for spelling and try importing again.", errors.get(0).getMessage());
@@ -105,7 +106,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorWhenParentIsOfInvalidType() {
-        courseStructureCsvs.add(new CsvRequest("New TB Symptoms", "Message", "Active", "Basic TB Symptoms", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest("New TB Symptoms", "Message", "Active", "Basic TB Symptoms", "Message Description", "FileName"));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(1, errors.size());
         assertEquals("The parent node specified is of not of valid type. Please check the parent node name and try importing again.", errors.get(0).getMessage());
@@ -114,7 +115,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldAddErrorWhenMessageDoesNotHaveFileName() {
-        courseStructureCsvs.add(new CsvRequest("Message TB Symptoms Version 2", "Message", "Active", "Chapter TB Symptoms", "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Message TB Symptoms Version 2", "Message", "Active", "Chapter TB Symptoms", "Message Description", null));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(1, errors.size());
         assertEquals("A message and question should have the name of the audio file. Please add the filename to CSV and try importing it again.", errors.get(0).getMessage());
@@ -122,8 +123,8 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldAddErrorWhenNonMessageNodeDoesNotHaveChild() throws Exception {
-        courseStructureCsvs.add(new CsvRequest("Module TB Symptoms2", "Module", "Active", "Basic TB Symptoms", "Message Description", null));
-        courseStructureCsvs.add(new CsvRequest("Chapter TB Symptoms2", "Chapter", "Active", "Module TB Symptoms2", "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Module TB Symptoms2", "Module", "Active", "Basic TB Symptoms", "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Chapter TB Symptoms2", "Chapter", "Active", "Module TB Symptoms2", "Message Description", null));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(1, errors.size());
         assertEquals("A chapter should have at least one message under it. Please check if the parent node name is correctly specified for modules in the CSV and try importing it again.", errors.get(0).getMessage());
@@ -132,9 +133,9 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorForChildStateIfParentIsInvalid() throws Exception {
-        courseStructureCsvs.add(new CsvRequest("Module TB Symptoms2", "Module", "Active", "Basic TB Symptoms1-parent", "Message Description", null));
-        courseStructureCsvs.add(new CsvRequest("Chapter TB Symptoms Version 2", "Chapter", "Active", "Module TB Symptoms2", "description Module TB Symptoms2", null));
-        courseStructureCsvs.add(new CsvRequest("Message TB Symptoms Version 2", "Message", "Active", "Chapter TB Symptoms Version 2", "Message Description", ""));
+        courseStructureCsvs.add(new CourseCsvRequest("Module TB Symptoms2", "Module", "Active", "Basic TB Symptoms1-parent", "Message Description", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Chapter TB Symptoms Version 2", "Chapter", "Active", "Module TB Symptoms2", "description Module TB Symptoms2", null));
+        courseStructureCsvs.add(new CourseCsvRequest("Message TB Symptoms Version 2", "Message", "Active", "Chapter TB Symptoms Version 2", "Message Description", ""));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(2, errors.size());
         assertEquals("Could not find the parent node specified in the CSV. Please check the parent node name for spelling and try importing again.", errors.get(0).getMessage());
@@ -143,7 +144,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorForNodeHavingInvalidStatus() {
-        courseStructureCsvs.add(new CsvRequest("Message TB Symptoms 1", "Message", "status_invalid", "Chapter TB Symptoms", "Message Description", "FileName"));
+        courseStructureCsvs.add(new CourseCsvRequest("Message TB Symptoms 1", "Message", "status_invalid", "Chapter TB Symptoms", "Message Description", "FileName"));
         errors = courseStructureValidator.validate(courseStructureCsvs);
         assertEquals(1, errors.size());
     }
@@ -179,7 +180,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorIfTheCorrectAnswerFileIsNotAvailable() throws Exception {
-        courseStructureCsvs.add(new CsvRequest("Question TB Symptoms", "Question", "Active", "Chapter TB Symptoms", "Message Description", "FileName", "1;2", "1", "", "1", "90"));
+        courseStructureCsvs.add(new CourseCsvRequest("Question TB Symptoms", "Question", "Active", "Chapter TB Symptoms", "Message Description", "FileName", "1;2", "1", "", "1", "90"));
 
         errors = courseStructureValidator.validate(courseStructureCsvs);
 
@@ -189,7 +190,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorIfOptionsAreNotAvailable() throws Exception {
-        courseStructureCsvs.add(new CsvRequest("Question TB Symptoms", "Question", "Active", "Chapter TB Symptoms", "Message Description", "FileName", "", "1", "CorrectAnswer", "1", "90"));
+        courseStructureCsvs.add(new CourseCsvRequest("Question TB Symptoms", "Question", "Active", "Chapter TB Symptoms", "Message Description", "FileName", "", "1", "CorrectAnswer", "1", "90"));
 
         errors = courseStructureValidator.validate(courseStructureCsvs);
 
@@ -199,7 +200,7 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorIfTheCorrectAnswerIsNotOneAmongTheOptions() throws Exception {
-        courseStructureCsvs.add(new CsvRequest("Question TB Symptoms", "Question", "Active", "Chapter TB Symptoms", "Message Description", "FileName", "1;2", "3", "CorrectAnswer", "1", "90"));
+        courseStructureCsvs.add(new CourseCsvRequest("Question TB Symptoms", "Question", "Active", "Chapter TB Symptoms", "Message Description", "FileName", "1;2", "3", "CorrectAnswer", "1", "90"));
 
         errors = courseStructureValidator.validate(courseStructureCsvs);
 
@@ -209,8 +210,8 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorIfNoOfQuestionsIsLessThanTheRequiredNoOfQuestionsToBeAnswered() {
-        courseStructureCsvs.add(new CsvRequest("Chapter TB Symptoms1", "Chapter", "Active", "Module TB Symptoms", "Message Description", null, null, null, null, "2", "60"));
-        courseStructureCsvs.add(new CsvRequest("Question TB Symptoms1", "Question", "Active", "Chapter TB Symptoms1", "Message Description", "FileName", "1;2", "1", "CorrectAnswer", null, null));
+        courseStructureCsvs.add(new CourseCsvRequest("Chapter TB Symptoms1", "Chapter", "Active", "Module TB Symptoms", "Message Description", null, null, null, null, "2", "60"));
+        courseStructureCsvs.add(new CourseCsvRequest("Question TB Symptoms1", "Question", "Active", "Chapter TB Symptoms1", "Message Description", "FileName", "1;2", "1", "CorrectAnswer", null, null));
 
         errors = courseStructureValidator.validate(courseStructureCsvs);
 
@@ -220,8 +221,8 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldReturnErrorIfNoOfQuestionsIsGreaterThanZeroAndPassPercentageIsNotValid() {
-        courseStructureCsvs.add(new CsvRequest("Chapter TB Symptoms1", "Chapter", "Active", "Module TB Symptoms", "Message Description", null, null, null, null, "2", "200"));
-        courseStructureCsvs.add(new CsvRequest("Question TB Symptoms1", "Question", "Active", "Chapter TB Symptoms1", "Message Description", "FileName", "1;2", "1", "CorrectAnswer", null, null));
+        courseStructureCsvs.add(new CourseCsvRequest("Chapter TB Symptoms1", "Chapter", "Active", "Module TB Symptoms", "Message Description", null, null, null, null, "2", "200"));
+        courseStructureCsvs.add(new CourseCsvRequest("Question TB Symptoms1", "Question", "Active", "Chapter TB Symptoms1", "Message Description", "FileName", "1;2", "1", "CorrectAnswer", null, null));
 
         errors = courseStructureValidator.validate(courseStructureCsvs);
 
@@ -231,8 +232,8 @@ public class CourseStructureValidatorTest {
 
     @Test
     public void shouldThrowNumberFormatExceptionWhenNoOfQuestionsIsNonNumeric() {
-        courseStructureCsvs.add(new CsvRequest("Chapter TB Symptoms1", "Chapter", "Active", "Module TB Symptoms", "Message Description", null, null, null, null, "*", ""));
-        courseStructureCsvs.add(new CsvRequest("Question TB Symptoms1", "Question", "Active", "Chapter TB Symptoms1", "Message Description", "FileName", "1;2", "1", "CorrectAnswer", null, null));
+        courseStructureCsvs.add(new CourseCsvRequest("Chapter TB Symptoms1", "Chapter", "Active", "Module TB Symptoms", "Message Description", null, null, null, null, "*", ""));
+        courseStructureCsvs.add(new CourseCsvRequest("Question TB Symptoms1", "Question", "Active", "Chapter TB Symptoms1", "Message Description", "FileName", "1;2", "1", "CorrectAnswer", null, null));
 
         errors = courseStructureValidator.validate(courseStructureCsvs);
 
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidatorTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidatorTest.java
new file mode 100644
index 0000000..1b3807e
--- /dev/null
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/csv/validator/ProviderStructureValidatorTest.java
@@ -0,0 +1,126 @@
+package org.motechproject.whp.mtraining.csv.validator;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.runners.MockitoJUnitRunner;
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
+import org.motechproject.whp.mtraining.csv.request.ProviderCsvRequest;
+
+import java.util.List;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static org.junit.Assert.assertEquals;
+
+@RunWith(MockitoJUnitRunner.class)
+
+public class ProviderStructureValidatorTest {
+    private ProviderStructureValidator providerStructureValidator;
+
+    @Before
+    public void setUp() {
+        providerStructureValidator = new ProviderStructureValidator();
+    }
+
+    @Test
+    public void shouldMandateARemedyIdInCsvForEachRequest() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("    ", "1234567890", "Active rhp", "state", "block", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("Remedy Id is not present for caller : 1234567890", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void remedyIdShouldBeUnique() {
+        ProviderCsvRequest providerCsvRequest1 = new ProviderCsvRequest("RemedyX", "1234567890", "Active rhp", "state", "block", "district");
+        ProviderCsvRequest providerCsvRequest2 = new ProviderCsvRequest("RemedyX", "1234567443", "Active rhp", "state2", "block3", "district2");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest1, providerCsvRequest2));
+
+        assertEquals(1, errors.size());
+        assertEquals("Remedy Id : RemedyX has multiple occurrences. Remedy id should be unique.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldMandateAPrimaryContactNumberInCsvForEachRequest() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("RemedyX", "", "Active rhp", "state", "block", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("Primary Contact Number is invalid for Remedy Id: RemedyX. It should be a 10 digit phone number.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldCheckIfPrimaryContactNumberIsNumeric() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("RemedyX", "qwertyuiop", "Active rhp", "state", "block", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("Primary Contact Number is invalid for Remedy Id: RemedyX. It should be a 10 digit phone number.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldCheckIfPrimaryContactNumberIsTenDigitsInLength() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("RemedyX", "98989898", "Active rhp", "state", "block", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("Primary Contact Number is invalid for Remedy Id: RemedyX. It should be a 10 digit phone number.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldCheckIfPrimaryContactNumberIsTUnique() {
+        ProviderCsvRequest providerCsvRequest1 = new ProviderCsvRequest("RemedyX", "1234567890", "Active rhp", "state", "block", "district");
+        ProviderCsvRequest providerCsvRequest2 = new ProviderCsvRequest("RemedyY", "1234567890", "Active rhp", "state", "block", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest1, providerCsvRequest2));
+
+        assertEquals(1, errors.size());
+        assertEquals("Primary Contact has multiple occurrences.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldVerifyForValidActivationStatus() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("RemedyX", "1234567890", "Random", "state", "block", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("Activation Status for Remedy Id: RemedyX is blank or invalid.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldVerifyForEmptyState() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("RemedyX", "1234567890", "Active rhp", "", "block", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("State is blank for Remedy Id: RemedyX.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldVerifyForEmptyDistrict() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("RemedyX", "1234567890", "Active rhp", "state", "block", "");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("District is blank for Remedy Id: RemedyX.", errors.get(0).getMessage());
+    }
+
+    @Test
+    public void shouldVerifyForEmptyBlock() {
+        ProviderCsvRequest providerCsvRequest = new ProviderCsvRequest("RemedyX", "1234567890", "Active rhp", "state", "", "district");
+
+        List<CsvImportError> errors = providerStructureValidator.validate(newArrayList(providerCsvRequest));
+
+        assertEquals(1, errors.size());
+        assertEquals("Block is blank for Remedy Id: RemedyX.", errors.get(0).getMessage());
+    }
+}
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/osgi/BookmarksBundleIT.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/osgi/BookmarksBundleIT.java
index 3edebe1..1e5565f 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/osgi/BookmarksBundleIT.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/osgi/BookmarksBundleIT.java
@@ -19,7 +19,6 @@ import org.motechproject.mtraining.service.CourseService;
 import org.motechproject.testing.utils.PollingHttpClient;
 import org.motechproject.testing.utils.TestContext;
 import org.motechproject.whp.mtraining.CourseBuilder;
-import org.motechproject.whp.mtraining.domain.Location;
 import org.motechproject.whp.mtraining.domain.Provider;
 import org.motechproject.whp.mtraining.domain.test.CustomHttpResponse;
 import org.motechproject.whp.mtraining.domain.test.CustomHttpResponseHandler;
@@ -155,7 +154,7 @@ public class BookmarksBundleIT extends AuthenticationAwareIT {
 
     private Provider addProvider(Long callerId, ActivationStatus activationStatus) {
         //this provider copy gets detached once saved,hence need to retrieve
-        Provider provider = new Provider(callerId, new Location("block", "district", "state"), activationStatus);
+        Provider provider = new Provider("remedyId", callerId, activationStatus, "district", "block", "state");
         providersAdded.add(providerService.add(provider));
         return providerService.byCallerId(callerId);
     }
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/repository/ProvidersIT.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/repository/ProvidersIT.java
index eb53522..4b67887 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/repository/ProvidersIT.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/repository/ProvidersIT.java
@@ -6,7 +6,6 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.motechproject.whp.mtraining.domain.Location;
 import org.motechproject.whp.mtraining.domain.Provider;
 import org.motechproject.whp.mtraining.web.domain.ActivationStatus;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -31,8 +30,7 @@ public class ProvidersIT {
     public void shouldAddAndRetrieveAProvider() {
         long callerId = 7657667L;
         assertThat(providers.getByCallerId(callerId), IsNull.nullValue());
-        Location bihar = new Location("Bihar");
-        Provider provider = new Provider(callerId, bihar, ActivationStatus.ACTIVE_RHP);
+        Provider provider = new Provider("remedyId", callerId, ActivationStatus.ACTIVE_RHP, "district", "block", "state");
 
         providers.add(provider);
 
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/CourseImportServiceTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/CourseImportServiceTest.java
index 0d99a28..32a13e2 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/CourseImportServiceTest.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/CourseImportServiceTest.java
@@ -14,7 +14,7 @@ import org.motechproject.mtraining.dto.ModuleDto;
 import org.motechproject.mtraining.service.CourseService;
 import org.motechproject.security.model.UserDto;
 import org.motechproject.security.service.MotechUserService;
-import org.motechproject.whp.mtraining.csv.request.CsvRequest;
+import org.motechproject.whp.mtraining.csv.request.CourseCsvRequest;
 
 import java.util.List;
 import java.util.UUID;
@@ -47,17 +47,17 @@ public class CourseImportServiceTest {
 
     @Test
     public void shouldInvokeCourseServiceToAddACourseEventuallyByConstructingContentTree() {
-        List<CsvRequest> requests = asList(
-                new CsvRequest("course1", "course", "active", null, "course description", null),
-                new CsvRequest("module1", "module", "active", "course1", "module1 description", null),
-                new CsvRequest("module2", "Module", "active", "course1", "module2 description", null),
-                new CsvRequest("chapter1", "CHAPTER", "active", "module1", "chapter1 description", null),
-                new CsvRequest("chapter2", "CHAPTER", "active", "module2", "chapter2 description", null),
-                new CsvRequest("message1", "message", "active", "chapter1", "message1 description", "filename1"),
-                new CsvRequest("message2", "message", "active", "chapter1", "message2 description", "filename2"),
-                new CsvRequest("message3", "message", "active", "chapter2", "message3 description", "filename3"),
-                new CsvRequest("message4", "message", "active", "chapter2", "message4 description", "filename4"),
-                new CsvRequest("message5", "message", "inactive", "chapter2", "message5 description", "filename4")
+        List<CourseCsvRequest> requests = asList(
+                new CourseCsvRequest("course1", "course", "active", null, "course description", null),
+                new CourseCsvRequest("module1", "module", "active", "course1", "module1 description", null),
+                new CourseCsvRequest("module2", "Module", "active", "course1", "module2 description", null),
+                new CourseCsvRequest("chapter1", "CHAPTER", "active", "module1", "chapter1 description", null),
+                new CourseCsvRequest("chapter2", "CHAPTER", "active", "module2", "chapter2 description", null),
+                new CourseCsvRequest("message1", "message", "active", "chapter1", "message1 description", "filename1"),
+                new CourseCsvRequest("message2", "message", "active", "chapter1", "message2 description", "filename2"),
+                new CourseCsvRequest("message3", "message", "active", "chapter2", "message3 description", "filename3"),
+                new CourseCsvRequest("message4", "message", "active", "chapter2", "message4 description", "filename4"),
+                new CourseCsvRequest("message5", "message", "inactive", "chapter2", "message5 description", "filename4")
         );
         UUID module1Id = UUID.randomUUID();
         testCourseUpdater.setContentId(module1Id);
@@ -74,9 +74,9 @@ public class CourseImportServiceTest {
 
     @Test
     public void shouldRetrieveCurrentUserAndSetItAsCourseContentCreator() {
-        List<CsvRequest> requests = asList(
-                new CsvRequest("course1", "course", "active", null, "course description", null),
-                new CsvRequest("module1", "module", "active", "course1", "module1 description", null)
+        List<CourseCsvRequest> requests = asList(
+                new CourseCsvRequest("course1", "course", "active", null, "course description", null),
+                new CourseCsvRequest("module1", "module", "active", "course1", "module1 description", null)
         );
 
         UserDto userDto = mock(UserDto.class);
@@ -90,7 +90,6 @@ public class CourseImportServiceTest {
         CourseDto savedCourseDto = courseDtoCaptor.getValue();
 
         assertThat(savedCourseDto.getCreatedBy(), Is.is("Course Admin"));
-
         verify(motechUserService).getCurrentUser();
     }
 
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderImportServiceTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderImportServiceTest.java
new file mode 100644
index 0000000..c2516eb
--- /dev/null
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderImportServiceTest.java
@@ -0,0 +1,65 @@
+package org.motechproject.whp.mtraining.service.impl;
+
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.ExpectedException;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+import org.motechproject.whp.mtraining.csv.request.ProviderCsvRequest;
+import org.motechproject.whp.mtraining.domain.Provider;
+import org.motechproject.whp.mtraining.repository.Providers;
+
+import java.util.Arrays;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+import static org.motechproject.whp.mtraining.web.domain.ActivationStatus.ACTIVE_RHP;
+
+
+@RunWith(MockitoJUnitRunner.class)
+public class ProviderImportServiceTest {
+
+    @Mock
+    private Providers providers;
+
+    @Rule
+    public ExpectedException expectedException = ExpectedException.none();
+
+    @Test
+    public void shouldAddToProvidersWhenImporting() {
+        ProviderImportService providerImportService = new ProviderImportService(providers);
+        String remedyId = "RemedyX";
+        String primaryContactNumber = "9898989898";
+        String activationsStatus = ACTIVE_RHP.getStatus();
+        String state = "state";
+        String block = "block";
+        String district = "district";
+
+        providerImportService.importProviders(Arrays.asList(new ProviderCsvRequest(remedyId, primaryContactNumber, activationsStatus, state, block, district)));
+
+        ArgumentCaptor<Provider> providerArgumentCaptor = ArgumentCaptor.forClass(Provider.class);
+        verify(providers).add(providerArgumentCaptor.capture());
+        Provider provider = providerArgumentCaptor.getValue();
+        assertEquals(provider.getRemedyId(), remedyId);
+        assertEquals(provider.getCallerId(), Long.valueOf(primaryContactNumber));
+        assertEquals(provider.getActivationStatus(), ACTIVE_RHP.getStatus());
+        assertEquals(provider.getState(), state);
+        assertEquals(provider.getBlock(), block);
+        assertEquals(provider.getDistrict(), district);
+    }
+
+    @Test
+    public void shouldNotAddProvidersIfTheyAlreadyExist() {
+        ProviderImportService providerImportService = new ProviderImportService(providers);
+        when(providers.all()).thenReturn(newArrayList(new Provider()));
+
+        expectedException.expect(RuntimeException.class);
+        expectedException.expectMessage("Providers already exist in the database");
+
+        providerImportService.importProviders(newArrayList(new ProviderCsvRequest()));
+    }
+}
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderServiceImplTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderServiceImplTest.java
index e534c14..0eac704 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderServiceImplTest.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/service/impl/ProviderServiceImplTest.java
@@ -8,7 +8,9 @@ import org.motechproject.whp.mtraining.service.ProviderService;
 import org.motechproject.whp.mtraining.web.domain.ActivationStatus;
 
 import static org.junit.Assert.assertThat;
-import static org.mockito.Mockito.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class ProviderServiceImplTest {
 
@@ -16,7 +18,7 @@ public class ProviderServiceImplTest {
     public void shouldAddProvider() {
         Providers providers = mock(Providers.class);
         ProviderService providerService = new ProviderServiceImpl(providers);
-        Provider provider = new Provider(654654l, null, ActivationStatus.ACTIVE_RHP);
+        Provider provider = new Provider("remedyId", 654654l, ActivationStatus.ACTIVE_RHP, "district", "block", "state");
         Provider persistedProvider = mock(Provider.class);
         when(providers.add(provider)).thenReturn(persistedProvider);
         when(persistedProvider.getId()).thenReturn(100l);
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/BookmarkControllerTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/BookmarkControllerTest.java
index 82b4728..14dc3d9 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/BookmarkControllerTest.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/BookmarkControllerTest.java
@@ -66,12 +66,11 @@ public class BookmarkControllerTest {
     @Test
     public void shouldMarkCallerAsUnidentifiedIfCallerIdNotRegistered() {
         long callerId = 76465464L;
-
         when(providers.getByCallerId(callerId)).thenReturn(null);
 
         MotechResponse response = bookmarkController.getBookmark(callerId, "uuid", null).getBody();
-        assertThat(response.getResponseCode(), is(UNKNOWN_PROVIDER.getCode()));
 
+        assertThat(response.getResponseCode(), is(UNKNOWN_PROVIDER.getCode()));
         verify(providers).getByCallerId(callerId);
         verify(callLogs).add(any(BookmarkRequest.class));
     }
@@ -100,7 +99,6 @@ public class BookmarkControllerTest {
     public void shouldGenerateSessionIdIfNotProvided() {
         long callerId = 76465464L;
         String uniqueId = "uuid";
-
         when(sessions.create()).thenReturn("7868jhgjg");
 
         MotechResponse bookmark = bookmarkController.getBookmark(callerId, uniqueId, null).getBody();
@@ -125,7 +123,7 @@ public class BookmarkControllerTest {
     @Test
     public void shouldMarkErrorIfProviderIsNotValid() {
         long callerId = 76465464L;
-        Provider provider = new Provider(callerId, null, ActivationStatus.ELIMINATED_RHP);
+        Provider provider = new Provider("remedyId", callerId, ActivationStatus.ELIMINATED_RHP, "district", "block", "state");
         when(providers.getByCallerId(callerId)).thenReturn(provider);
 
         MotechResponse response = bookmarkController.getBookmark(callerId, "uuid", null).getBody();
@@ -144,18 +142,14 @@ public class BookmarkControllerTest {
         ContentIdentifierDto moduleIdentifier = new ContentIdentifierDto(UUID.randomUUID(), 2);
         ContentIdentifierDto chapterIdentifier = new ContentIdentifierDto(UUID.randomUUID(), 1);
         ContentIdentifierDto messageIdentifier = new ContentIdentifierDto(UUID.randomUUID(), 1);
-
         BookmarkPostRequest bookmarkPostRequest = new BookmarkPostRequest(callerId, uniqueId, sessionId, new Bookmark(courseIdentifier, moduleIdentifier, chapterIdentifier, messageIdentifier));
-
-        Provider provider = new Provider(callerId, null, ActivationStatus.ACTIVE_TPC);
+        Provider provider = new Provider("remedyId", callerId, ActivationStatus.ACTIVE_TPC, "district", "block", "state");
         when(providers.getByCallerId(callerId)).thenReturn(provider);
 
         bookmarkController.postBookmark(bookmarkPostRequest);
 
         ArgumentCaptor<BookmarkDto> bookmarkDtoArgumentCaptor = ArgumentCaptor.forClass(BookmarkDto.class);
         verify(bookmarkService).update(bookmarkDtoArgumentCaptor.capture());
-
-
         BookmarkDto postedBookmark = bookmarkDtoArgumentCaptor.getValue();
         assertThat(postedBookmark.getExternalId(), Is.is(provider.getRemedyId()));
         assertThat(postedBookmark.getCourse(), Is.is(courseIdentifier));
@@ -171,10 +165,9 @@ public class BookmarkControllerTest {
         BookmarkPostRequest bookmarkPostRequest = new BookmarkPostRequest(null, uniqueId, sessionId, new Bookmark());
 
         ResponseEntity<MotechResponse> response = bookmarkController.postBookmark(bookmarkPostRequest);
-        assertEquals(MISSING_CALLER_ID.getCode(), response.getBody().getResponseCode());
 
+        assertEquals(MISSING_CALLER_ID.getCode(), response.getBody().getResponseCode());
         verify(bookmarkService, never()).update(any(BookmarkDto.class));
-
     }
 
     @Test
@@ -184,23 +177,21 @@ public class BookmarkControllerTest {
         Long callerId = 124456l;
         Bookmark bookmark = new BookmarkBuilder().build();
         BookmarkPostRequest bookmarkPostRequest = new BookmarkPostRequest(callerId, uniqueId, sessionId, bookmark);
-
         when(providers.getByCallerId(callerId)).thenReturn(null);
 
         ResponseEntity<MotechResponse> response = bookmarkController.postBookmark(bookmarkPostRequest);
-        assertEquals(UNKNOWN_PROVIDER.getCode(), response.getBody().getResponseCode());
 
+        assertEquals(UNKNOWN_PROVIDER.getCode(), response.getBody().getResponseCode());
         verify(bookmarkService, never()).update(any(BookmarkDto.class));
     }
 
-
     @Test
     public void shouldSendErrorResponseWhenUniqueIdIsMissing() {
         BookmarkPostRequest bookmarkPostRequest = new BookmarkPostRequest(3232938l, null, "session01", new Bookmark());
 
         ResponseEntity<MotechResponse> response = bookmarkController.postBookmark(bookmarkPostRequest);
-        assertEquals(MISSING_UNIQUE_ID.getCode(), response.getBody().getResponseCode());
 
+        assertEquals(MISSING_UNIQUE_ID.getCode(), response.getBody().getResponseCode());
         verify(bookmarkService, never()).update(any(BookmarkDto.class));
     }
 
@@ -209,24 +200,21 @@ public class BookmarkControllerTest {
         BookmarkPostRequest bookmarkPostRequest = new BookmarkPostRequest(3232938l, "unq11", null, new Bookmark());
 
         ResponseEntity<MotechResponse> response = bookmarkController.postBookmark(bookmarkPostRequest);
-        assertEquals(MISSING_SESSION_ID.getCode(), response.getBody().getResponseCode());
 
+        assertEquals(MISSING_SESSION_ID.getCode(), response.getBody().getResponseCode());
         verify(bookmarkService, never()).update(any(BookmarkDto.class));
     }
 
     @Test
     public void shouldSendErrorResponseWhenBookmarkDateModifiedAbsent() {
         long callerId = 3232938l;
-        Provider provider = new Provider(callerId, null, ActivationStatus.ACTIVE_TPC);
+        Provider provider = new Provider(null, callerId, ActivationStatus.ACTIVE_TPC, "district", "block", "state");
         when(providers.getByCallerId(callerId)).thenReturn(provider);
-
-
         Bookmark bookmark = new BookmarkBuilder().withDateModified(null).build();
         BookmarkPostRequest bookmarkPostRequest = new BookmarkPostRequest(callerId, "unq11", "s001", bookmark);
+
         ResponseEntity<MotechResponse> responseEntity = bookmarkController.postBookmark(bookmarkPostRequest);
 
         assertEquals(INVALID_BOOKMARK_MODIFIED_DATE.getCode(), responseEntity.getBody().getResponseCode());
     }
-
-
-}
+}
\ No newline at end of file
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/CourseImportControllerTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/CourseImportControllerTest.java
index 35e6607..d00af42 100644
--- a/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/CourseImportControllerTest.java
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/CourseImportControllerTest.java
@@ -7,9 +7,9 @@ import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 import org.motechproject.mtraining.dto.ContentIdentifierDto;
 import org.motechproject.whp.mtraining.csv.parser.CsvParser;
-import org.motechproject.whp.mtraining.csv.request.CsvRequest;
-import org.motechproject.whp.mtraining.csv.response.CourseImportResponse;
-import org.motechproject.whp.mtraining.csv.validator.CourseImportError;
+import org.motechproject.whp.mtraining.csv.request.CourseCsvRequest;
+import org.motechproject.whp.mtraining.csv.response.CsvImportResponse;
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
 import org.motechproject.whp.mtraining.csv.validator.CourseStructureValidator;
 import org.motechproject.whp.mtraining.service.impl.CourseImportService;
 import org.springframework.web.multipart.MultipartFile;
@@ -49,13 +49,13 @@ public class CourseImportControllerTest {
     @Test
     public void shouldReturnErrorWhenCourseStructureIsInvalid() throws Exception {
         CommonsMultipartFile csvFile = mock(CommonsMultipartFile.class);
-        CsvRequest courseRequestWithoutParentName = new CsvRequest("nodeName", "nodeType", "status", null, "description", "fileName");
-        List<CsvRequest> courseList = asList(courseRequestWithoutParentName);
-        List<CourseImportError> errors = asList(new CourseImportError("nodeName", "nodeType", "some message"));
-        when(csvParser.parse(csvFile, CsvRequest.class)).thenReturn(courseList);
+        CourseCsvRequest courseRequestWithoutParentName = new CourseCsvRequest("nodeName", "nodeType", "status", null, "description", "fileName");
+        List<CourseCsvRequest> courseList = asList(courseRequestWithoutParentName);
+        List<CsvImportError> errors = asList(new CsvImportError("nodeName", "nodeType", "some message"));
+        when(csvParser.parse(csvFile, CourseCsvRequest.class)).thenReturn(courseList);
         when(courseStructureValidator.validate(courseList)).thenReturn(errors);
 
-        CourseImportResponse response = courseImportController.importCourseStructure(csvFile);
+        CsvImportResponse response = courseImportController.importCourseStructure(csvFile);
 
         assertTrue(response.isFailure());
         assertEquals(errors, response.getErrors());
@@ -66,9 +66,9 @@ public class CourseImportControllerTest {
     public void shouldReturnErrorResultWhenExceptionThrownParsingCsv() throws Exception {
         String exceptionMessage = "Error parsing CSV";
         when(csvParser.parse(any(MultipartFile.class), any(Class.class))).thenThrow(new IOException(exceptionMessage));
-        List<CourseImportError> expectedError = asList(new CourseImportError(exceptionMessage));
+        List<CsvImportError> expectedError = asList(new CsvImportError(exceptionMessage));
 
-        CourseImportResponse response = courseImportController.importCourseStructure(mock(CommonsMultipartFile.class));
+        CsvImportResponse response = courseImportController.importCourseStructure(mock(CommonsMultipartFile.class));
 
         assertTrue(response.isFailure());
         assertEquals(expectedError, response.getErrors());
@@ -77,16 +77,16 @@ public class CourseImportControllerTest {
     @Test
     public void shouldImportCourseStructureIfThereAreNoValidationFailures() throws IOException {
         CommonsMultipartFile csvFile = mock(CommonsMultipartFile.class);
-        List<CsvRequest> CsvRequests = asList(new CsvRequest());
-        when(csvParser.parse(csvFile, CsvRequest.class)).thenReturn(CsvRequests);
-        when(courseStructureValidator.validate(CsvRequests)).thenReturn(Collections.EMPTY_LIST);
-        when(courseImportService.importCourse(CsvRequests)).thenReturn(new ContentIdentifierDto(UUID.randomUUID(), 1));
+        List<CourseCsvRequest> courseCsvRequests = asList(new CourseCsvRequest());
+        when(csvParser.parse(csvFile, CourseCsvRequest.class)).thenReturn(courseCsvRequests);
+        when(courseStructureValidator.validate(courseCsvRequests)).thenReturn(Collections.EMPTY_LIST);
+        when(courseImportService.importCourse(courseCsvRequests)).thenReturn(new ContentIdentifierDto(UUID.randomUUID(), 1));
 
-        CourseImportResponse courseImportResponse = courseImportController.importCourseStructure(csvFile);
+        CsvImportResponse csvImportResponse = courseImportController.importCourseStructure(csvFile);
 
-        verify(courseImportService).importCourse(CsvRequests);
-        assertTrue(courseImportResponse.isSuccess());
-        assertTrue(courseImportResponse.getErrors().isEmpty());
+        verify(courseImportService).importCourse(courseCsvRequests);
+        assertTrue(csvImportResponse.isSuccess());
+        assertTrue(csvImportResponse.getErrors().isEmpty());
     }
 
 }
diff --git a/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/ProviderImportControllerTest.java b/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/ProviderImportControllerTest.java
new file mode 100644
index 0000000..37bdd2b
--- /dev/null
+++ b/mtraining/src/test/java/org/motechproject/whp/mtraining/web/controller/ProviderImportControllerTest.java
@@ -0,0 +1,67 @@
+package org.motechproject.whp.mtraining.web.controller;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+import org.motechproject.whp.mtraining.csv.parser.CsvParser;
+import org.motechproject.whp.mtraining.csv.request.ProviderCsvRequest;
+import org.motechproject.whp.mtraining.csv.response.CsvImportResponse;
+import org.motechproject.whp.mtraining.csv.domain.CsvImportError;
+import org.motechproject.whp.mtraining.csv.validator.ProviderStructureValidator;
+import org.motechproject.whp.mtraining.service.impl.ProviderImportService;
+import org.springframework.web.multipart.commons.CommonsMultipartFile;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+import static org.motechproject.whp.mtraining.csv.response.CsvImportResponse.FAILURE_RESPONSE_STATUS;
+import static org.motechproject.whp.mtraining.csv.response.CsvImportResponse.SUCCESS_RESPONSE_STATUS;
+
+@RunWith(MockitoJUnitRunner.class)
+public class ProviderImportControllerTest {
+
+    @Mock
+    private CsvParser csvParser;
+    @Mock
+    private ProviderStructureValidator providerStructureValidator;
+    @Mock
+    private ProviderImportService providerImportService;
+
+    @Test
+    public void shouldImportSuccessfullyWhenTheRequestsAreValid() throws IOException {
+        CommonsMultipartFile csvFile = mock(CommonsMultipartFile.class);
+        ProviderImportController providerImportController = new ProviderImportController(csvParser, providerStructureValidator, providerImportService);
+        ArrayList<ProviderCsvRequest> providerCsvRequests = newArrayList(new ProviderCsvRequest("remedyId", "1234567890", "Active Rhp", "state", "block", "district"));
+        when(csvParser.parse(csvFile, ProviderCsvRequest.class)).thenReturn(providerCsvRequests);
+        when(providerStructureValidator.validate(providerCsvRequests)).thenReturn(Collections.EMPTY_LIST);
+
+        CsvImportResponse importResponse = providerImportController.importProviderStructure(csvFile);
+
+        verify(providerImportService).importProviders(providerCsvRequests);
+        assertEquals(importResponse.getStatus(), SUCCESS_RESPONSE_STATUS);
+        assertEquals(importResponse.getMessage(), "Providers have been successfully imported");
+    }
+
+    @Test
+    public void shouldReturnErrorsWhenProviderListIsInvalid() throws IOException {
+        CommonsMultipartFile csvFile = mock(CommonsMultipartFile.class);
+        ProviderImportController providerImportController = new ProviderImportController(csvParser, providerStructureValidator, providerImportService);
+        ArrayList<ProviderCsvRequest> providerCsvRequests = newArrayList(new ProviderCsvRequest("remedyId", "1234567890", "Active Rhp", "state", "block", "district"));
+        when(csvParser.parse(csvFile, ProviderCsvRequest.class)).thenReturn(providerCsvRequests);
+        when(providerStructureValidator.validate(providerCsvRequests)).thenReturn(newArrayList(new CsvImportError("Some error")));
+
+        CsvImportResponse importResponse = providerImportController.importProviderStructure(csvFile);
+
+        verify(providerImportService, never()).importProviders(providerCsvRequests);
+        assertEquals(importResponse.getStatus(), FAILURE_RESPONSE_STATUS);
+        assertEquals(importResponse.getMessage(), "Could not import the CSV due to errors. Please fix the errors and try importing again.");
+    }
+}
-- 
1.8.5.2

